#!/usr/bin/env python3

#####################################   SCRIPTS_v340   #####################################################

import os
import sys
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('Vte', '2.91')
from gi.repository import Gdk, GdkPixbuf, Gio, GLib, GObject, Gtk, Vte, Pango
from pathlib import Path
import subprocess
from subprocess import *
import threading
from threading import *
import traceback
import logging
import argparse
import urllib.request
import time

sw_path = f"{Path.home()}/StartWine/"
sw_scripts = f"{Path.home()}/StartWine/data/scripts/"
sw_shortcuts = f"{Path.home()}/StartWine/Shortcuts/"
sw_favorites = f"{Path.home()}/StartWine/data/img/favorites/"
sw_icon = f"{Path.home()}/StartWine/data/img/"
sw_games_config = f"{Path.home()}/StartWine/data/games_config/"
sw_wine_custom = f"{Path.home()}/StartWine/data/wine/wine_custom/"
sw_css_dark = f"{sw_icon}/gui_icons/sw_themes/css/dark/"
sw_css_light = f"{sw_icon}/gui_icons/sw_themes/css/light/"

pgrep = f"pgrep -a python3 | grep 'start '"
echo1 = f"echo env '\"'{sw_scripts}start'\"' '\"'`{pgrep} | sed -n '1p' | cut -d ' ' -f4-100`'\"'"
echo2 = f"echo env '\"'{sw_scripts}start'\"' '\"'`{pgrep} | sed -n '2p' | cut -d ' ' -f4-100`'\"'"

def start_tray():

    cmd_start_tray = f"{sw_scripts}runlib START_TRAY"
    subprocess.call(cmd_start_tray, shell=True)

start_tray()

def echo_run():

    cmd_echo1 = f"echo '\"'`{pgrep} | sed -n '1p' | cut -d ' ' -f4-100`'\"'"
    out1 = str(subprocess.run(cmd_echo1, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:])

    cmd_echo2 = f"echo '\"'`{pgrep} | sed -n '2p' | cut -d ' ' -f4-100`'\"'"
    out2 = str(subprocess.run(cmd_echo2, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:])

    if out2 == '""\n':
        cmd_echo_run1 = f"sed -i '1,100d' {sw_scripts}run.sh && {echo1} >> {sw_scripts}run.sh"
        subprocess.call(cmd_echo_run1, shell=True)
    else:
        cmd_echo_run2 = f"sed -i '1,100d' {sw_scripts}run.sh && {echo2} >> {sw_scripts}run.sh"
        subprocess.call(cmd_echo_run2, shell=True)

echo_run()

def get_path_game():

    cmd_cut = f"cut -d ' ' -f3-100 {sw_scripts}run.sh"
    path_game = str(subprocess.run(cmd_cut, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    return path_game

def get_arg(arg):

    return arg

get_arg(get_path_game())

path_game = get_arg(get_path_game())
exe_name = str(list(str(get_arg(get_path_game())).strip('"').split("/"))[-1].split(" ")[-1])
print(path_game)
print(exe_name)

def get_out():

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace('%F', '').replace(' ', '_')
    return out_cmd

##################################################___SW_MENU___#########################################################

def on_btn_back_terminal(self):

    cmd_clear = f"clear\n"
    terminal_sh.feed_child(cmd_clear.encode("UTF-8"))

    main_stack.set_visible_child_name("vte_main_box")

    Thread(target=run_htop).start()

    def ASCII():

        try:
            with open(f"/usr/bin/jp2a"):
                name_jpg = f"cd {sw_icon}gui_icons && ls -1 | grep .jpg"
                proc = subprocess.run(name_jpg, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
                out_name = str(proc.stdout[0:]).replace('\n', '')
                open(f"{sw_icon}gui_icons/{out_name}")

        except (IOError, OSError) as e:
            cmd_ascii = f"clear && cat {sw_path}data/img/gui_icons/ASCII\n"
            terminal_sh.feed_child(cmd_ascii.encode("UTF-8"))
            print("image not found, set default ASCII")

        else:
            name_jpg = f"cd {sw_icon}gui_icons && ls -1 | grep .jpg"
            proc = subprocess.run(name_jpg, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
            out_name = str(proc.stdout[0:]).replace('\n', '')
            print(out_name)
            cmd_ascii = f"clear && jp2a --colors {sw_icon}gui_icons/{out_name} && cat {sw_icon}gui_icons/ASCII_SW\n"
            terminal_sh.feed_child(cmd_ascii.encode("UTF-8"))

    ASCII()

def on_btn_back_fs(self):

    main_stack.set_visible_child_name("favorites_main_box")
    cmd_exit = f"q \n clear\n"
    terminal.feed_child(cmd_exit.encode("UTF-8"))

def on_btn_back_app_conf(self):

    main_stack.set_visible_child_name("app_conf_main_box")

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)

    try:
        with open(games_config_name, 'r') as gc:
            text = gc.read()
            app_conf_text.set_editable(True)
            buffer = app_conf_text.get_buffer()
            buffer.set_text(text)
    except IOError as e:
        print("games_config not found, set default value")
        on_btn_app_conf_default(self)

def on_btn_back_app_conf_1(self):

    on_btn_back_app_conf(self)

def on_btn_app_conf_save(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)

    try:
        with open(games_config_name, 'w') as gc:
            buffer = app_conf_text.get_buffer()
            startIter, endIter = buffer.get_bounds()
            t = buffer.get_text(startIter, endIter, False)
            gc.write(t)
    except IOError as e:
        print("application config not found, set default value")

def on_btn_app_conf_default(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)
    games_config_default = f"{sw_games_config}.default"
    try:
        gcd = open(games_config_default, 'r')
        text = gcd.read()
        buffer = app_conf_text.get_buffer()
        buffer.set_text(text)
        gcn = open(games_config_name, 'w')
        gcn.write(text)
    except IOError as e:
        print("application config not found, set default value")

def run_htop():

    cmd_htop = f"htop -C -F .exe\n"
    terminal.feed_child(cmd_htop.encode("UTF-8"))

###############################################___FAVORITES_XRANDR___###################################################

def on_btn_hide_favorites(self):

    window.set_resizable(False)
    window.resize(320, 640)
    favorites_btn_stack.set_visible_child_name("get_favorites")

def get_size(widget, event):

    w = window.get_size().width
    h = window.get_size().height

    favorites_scrolled.set_max_content_height(h*0.8)
    app_conf_scrolled.set_max_content_height(h*0.8)
    vte_scrolled.set_max_content_height(h*0.8)
    settings_scrolled.set_min_content_height(h*0.85)

    if w > 360:
        img_path = f"{sw_icon}gui_icons/sw_top_header"
        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, w-360, 32, preserve_aspect_ratio=False)
        top_header.set_from_pixbuf(pixbuf)
    if w <= 320:
        window.set_resizable(False)
        window.resize(320, 640)
        favorites_btn_stack.set_visible_child_name("get_favorites")

def on_btn_get_favorites(self):

    screen = Gdk.Display.get_default()
    monitor = screen.get_primary_monitor()
    scale_factor = monitor.get_scale_factor()
    w = 0
    h = 0
    for x in range(0, screen.get_n_monitors()):
         w += screen.get_monitor(x).get_geometry().width
         if ( h < screen.get_monitor(x).get_geometry().height ):
              h = screen.get_monitor(x).get_geometry().height
    x = w * scale_factor
    y = h * scale_factor
    print (f"{x}*{y}")

    favorites_btn_stack.set_visible_child_name("hide_favorites")

    if x <= 1920:
        window.set_resizable(True)
        win_resize = window.resize(x*0.8, y*0.8)

    if x > 1920 and x <= 2560:
        window.set_resizable(True)
        win_resize = window.resize(x*0.75, y*0.75)

    if x > 2560:
        window.set_resizable(True)
        win_resize = window.resize(x*0.66, y*0.66)

###########################################___ECHO_FAVORITES_PATH___####################################################

def echo_favorites_path(fav_name):

    fav_num = fav_name
    path_game = get_arg(get_path_game())

    cmd_name = f"cd {sw_favorites} && ls -1 | sed -n {fav_num}"
    proc1 = subprocess.run(cmd_name, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_name1 = str(proc1.stdout[0:]).replace('\n', '')
    cmd = f"sed -i '1d' {sw_scripts}run.sh && echo '\'`sed -n '4p' {sw_favorites}{out_name1} | cut -d '=' -f2-100`'\' >> {sw_scripts}run.sh"
    subprocess.call(cmd, shell=True)
    game_name()
    get_favorites()
    start_tray()
    return True


###################################___FAVORITES_EVENT_ON_BTN___#########################################################

def on_btn_g_event1(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g1)
        g_popover1.show_all()

    fav_name = f"'1p'"
    echo_favorites_path(fav_name)

def on_btn_g_event2(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g2)
        g_popover1.show_all()

    fav_name = f"'2p'"
    echo_favorites_path(fav_name)

def on_btn_g_event3(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g3)
        g_popover1.show_all()

    fav_name = f"'3p'"
    echo_favorites_path(fav_name)

def on_btn_g_event4(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g4)
        g_popover1.show_all()

    fav_name = f"'4p'"
    echo_favorites_path(fav_name)

def on_btn_g_event5(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g5)
        g_popover1.show_all()

    fav_name = f"'5p'"
    echo_favorites_path(fav_name)

def on_btn_g_event6(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g6)
        g_popover1.show_all()

    fav_name = f"'6p'"
    echo_favorites_path(fav_name)

def on_btn_g_event7(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g7)
        g_popover1.show_all()

    fav_name = f"'7p'"
    echo_favorites_path(fav_name)

def on_btn_g_event8(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g8)
        g_popover1.show_all()

    fav_name = f"'8p'"
    echo_favorites_path(fav_name)

def on_btn_g_event9(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g9)
        g_popover1.show_all()

    fav_name = f"'9p'"
    echo_favorites_path(fav_name)

def on_btn_g_event10(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g10)
        g_popover1.show_all()

    fav_name = f"'10p'"
    echo_favorites_path(fav_name)

def on_btn_g_event11(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g11)
        g_popover1.show_all()

    fav_name = f"'11p'"
    echo_favorites_path(fav_name)

def on_btn_g_event12(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g12)
        g_popover1.show_all()

    fav_name = f"'12p'"
    echo_favorites_path(fav_name)

def on_btn_g_event13(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g13)
        g_popover1.show_all()

    fav_name = f"'13p'"
    echo_favorites_path(fav_name)

def on_btn_g_event14(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g14)
        g_popover1.show_all()

    fav_name = f"'14p'"
    echo_favorites_path(fav_name)

def on_btn_g_event15(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g15)
        g_popover1.show_all()

    fav_name = f"'15p'"
    echo_favorites_path(fav_name)

def on_btn_g_event16(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g16)
        g_popover1.show_all()

    fav_name = f"'16p'"
    echo_favorites_path(fav_name)

def on_btn_g_event17(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g17)
        g_popover1.show_all()

    fav_name = f"'17p'"
    echo_favorites_path(fav_name)

def on_btn_g_event18(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g18)
        g_popover1.show_all()

    fav_name = f"'18p'"
    echo_favorites_path(fav_name)

def on_btn_g_event19(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g19)
        g_popover1.show_all()

    fav_name = f"'19p'"
    echo_favorites_path(fav_name)

def on_btn_g_event20(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g20)
        g_popover1.show_all()

    fav_name = f"'20p'"
    echo_favorites_path(fav_name)

def on_btn_g_event21(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g21)
        g_popover1.show_all()

    fav_name = f"'21p'"
    echo_favorites_path(fav_name)

def on_btn_g_event22(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g22)
        g_popover1.show_all()

    fav_name = f"'22p'"
    echo_favorites_path(fav_name)

def on_btn_g_event23(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g23)
        g_popover1.show_all()

    fav_name = f"'23p'"
    echo_favorites_path(fav_name)

def on_btn_g_event24(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g24)
        g_popover1.show_all()

    fav_name = f"'24p'"
    echo_favorites_path(fav_name)

def on_btn_g_event25(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g25)
        g_popover1.show_all()

    fav_name = f"'25p'"
    echo_favorites_path(fav_name)

def on_btn_g_event26(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g26)
        g_popover1.show_all()

    fav_name = f"'26p'"
    echo_favorites_path(fav_name)

def on_btn_g_event27(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g27)
        g_popover1.show_all()

    fav_name = f"'27p'"
    echo_favorites_path(fav_name)

def on_btn_g_event28(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g28)
        g_popover1.show_all()

    fav_name = f"'28p'"
    echo_favorites_path(fav_name)

def on_btn_g_event29(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g29)
        g_popover1.show_all()

    fav_name = f"'29p'"
    echo_favorites_path(fav_name)

def on_btn_g_event30(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g30)
        g_popover1.show_all()

    fav_name = f"'30p'"
    echo_favorites_path(fav_name)

def on_btn_g_event31(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g31)
        g_popover1.show_all()

    fav_name = f"'31p'"
    echo_favorites_path(fav_name)

def on_btn_g_event32(widget, event):

    if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
        g_popover1.set_relative_to(btn_g32)
        g_popover1.show_all()

    fav_name = f"'32p'"
    echo_favorites_path(fav_name)

def game_name_flow():

    cmd1 = f"cd {sw_favorites} && ls -1 | sed -n '1p' | sed 's/\.desktop//g'"
    cmd2 = f"cd {sw_favorites} && ls -1 | sed -n '2p' | sed 's/\.desktop//g'"
    cmd3 = f"cd {sw_favorites} && ls -1 | sed -n '3p' | sed 's/\.desktop//g'"
    cmd4 = f"cd {sw_favorites} && ls -1 | sed -n '4p' | sed 's/\.desktop//g'"
    cmd5 = f"cd {sw_favorites} && ls -1 | sed -n '5p' | sed 's/\.desktop//g'"
    cmd6 = f"cd {sw_favorites} && ls -1 | sed -n '6p' | sed 's/\.desktop//g'"
    cmd7 = f"cd {sw_favorites} && ls -1 | sed -n '7p' | sed 's/\.desktop//g'"
    cmd8 = f"cd {sw_favorites} && ls -1 | sed -n '8p' | sed 's/\.desktop//g'"
    cmd9 = f"cd {sw_favorites} && ls -1 | sed -n '9p' | sed 's/\.desktop//g'"
    cmd10 = f"cd {sw_favorites} && ls -1 | sed -n '10p' | sed 's/\.desktop//g'"
    cmd11 = f"cd {sw_favorites} && ls -1 | sed -n '11p' | sed 's/\.desktop//g'"
    cmd12 = f"cd {sw_favorites} && ls -1 | sed -n '12p' | sed 's/\.desktop//g'"
    cmd13 = f"cd {sw_favorites} && ls -1 | sed -n '13p' | sed 's/\.desktop//g'"
    cmd14 = f"cd {sw_favorites} && ls -1 | sed -n '14p' | sed 's/\.desktop//g'"
    cmd15 = f"cd {sw_favorites} && ls -1 | sed -n '15p' | sed 's/\.desktop//g'"
    cmd16 = f"cd {sw_favorites} && ls -1 | sed -n '16p' | sed 's/\.desktop//g'"
    cmd17 = f"cd {sw_favorites} && ls -1 | sed -n '17p' | sed 's/\.desktop//g'"
    cmd18 = f"cd {sw_favorites} && ls -1 | sed -n '18p' | sed 's/\.desktop//g'"
    cmd19 = f"cd {sw_favorites} && ls -1 | sed -n '19p' | sed 's/\.desktop//g'"
    cmd20 = f"cd {sw_favorites} && ls -1 | sed -n '20p' | sed 's/\.desktop//g'"
    cmd21 = f"cd {sw_favorites} && ls -1 | sed -n '21p' | sed 's/\.desktop//g'"
    cmd22 = f"cd {sw_favorites} && ls -1 | sed -n '22p' | sed 's/\.desktop//g'"
    cmd23 = f"cd {sw_favorites} && ls -1 | sed -n '23p' | sed 's/\.desktop//g'"
    cmd24 = f"cd {sw_favorites} && ls -1 | sed -n '24p' | sed 's/\.desktop//g'"
    cmd25 = f"cd {sw_favorites} && ls -1 | sed -n '25p' | sed 's/\.desktop//g'"
    cmd26 = f"cd {sw_favorites} && ls -1 | sed -n '26p' | sed 's/\.desktop//g'"
    cmd27 = f"cd {sw_favorites} && ls -1 | sed -n '27p' | sed 's/\.desktop//g'"
    cmd28 = f"cd {sw_favorites} && ls -1 | sed -n '28p' | sed 's/\.desktop//g'"
    cmd29 = f"cd {sw_favorites} && ls -1 | sed -n '29p' | sed 's/\.desktop//g'"
    cmd30 = f"cd {sw_favorites} && ls -1 | sed -n '30p' | sed 's/\.desktop//g'"
    cmd31 = f"cd {sw_favorites} && ls -1 | sed -n '31p' | sed 's/\.desktop//g'"
    cmd32 = f"cd {sw_favorites} && ls -1 | sed -n '32p' | sed 's/\.desktop//g'"

    out_name1 = str(subprocess.run(cmd1, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name2 = str(subprocess.run(cmd2, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name3 = str(subprocess.run(cmd3, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name4 = str(subprocess.run(cmd4, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name5 = str(subprocess.run(cmd5, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name6 = str(subprocess.run(cmd6, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name7 = str(subprocess.run(cmd7, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name8 = str(subprocess.run(cmd8, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name9 = str(subprocess.run(cmd9, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name10 = str(subprocess.run(cmd10, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name11 = str(subprocess.run(cmd11, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name12 = str(subprocess.run(cmd12, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name13 = str(subprocess.run(cmd13, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name14 = str(subprocess.run(cmd14, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name15 = str(subprocess.run(cmd15, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name16 = str(subprocess.run(cmd16, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name17 = str(subprocess.run(cmd17, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name18 = str(subprocess.run(cmd18, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name19 = str(subprocess.run(cmd19, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name20 = str(subprocess.run(cmd20, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name21 = str(subprocess.run(cmd21, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name22 = str(subprocess.run(cmd22, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name23 = str(subprocess.run(cmd23, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name24 = str(subprocess.run(cmd24, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name25 = str(subprocess.run(cmd25, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name26 = str(subprocess.run(cmd26, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name27 = str(subprocess.run(cmd27, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name28 = str(subprocess.run(cmd28, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name29 = str(subprocess.run(cmd29, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name30 = str(subprocess.run(cmd30, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name31 = str(subprocess.run(cmd31, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name32 = str(subprocess.run(cmd32, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')

    def out_event_num(event_num, out_num):

        num = event_num
        out_name = out_num
        try:
            icon_path = f"icon_path{num}"
            icon_path = open(f"{sw_icon}" + str(out_name) + '_x96.png')
        except IOError as e:
            icon_path = f"icon_path{num}"
            icon_path = f"{sw_icon}gui_icons/unavailable.svg"
        else:
            icon_path = f"icon_path{num}"
            icon_path = f"{sw_icon}" + str(out_name) + '_x96.png'

        btn_g = eval(f"btn_g{num}")
        btn_g.show()
        btn_g.connect('button-press-event', eval(f"on_btn_g_event{num}"))
        g_icon = f"g_icon{num}"
        g_icon = builder.get_object(f"g_img{num}")
        g_icon.set_from_file(icon_path)
        g_label = f"g_label{num}"
        g_label = builder.get_object(f"g_label_{num}")
        g_label.set_label(out_name)

    if out_name1 != '':

        event_num = f"1"
        out_num = out_name1
        out_event_num(event_num, out_num)
    else:
        btn_g1.hide()

    if out_name2 != '':

        event_num = f"2"
        out_num = out_name2
        out_event_num(event_num, out_num)
    else:
        btn_g2.hide()

    if out_name3 != '':

        event_num = f"3"
        out_num = out_name3
        out_event_num(event_num, out_num)
    else:
        btn_g3.hide()

    if out_name4 != '':

        event_num = f"4"
        out_num = out_name4
        out_event_num(event_num, out_num)
    else:
        btn_g4.hide()

    if out_name5 != '':

        event_num = f"5"
        out_num = out_name5
        out_event_num(event_num, out_num)
    else:
        btn_g5.hide()

    if out_name6 != '':

        event_num = f"6"
        out_num = out_name6
        out_event_num(event_num, out_num)
    else:
        btn_g6.hide()

    if out_name7 != '':

        event_num = f"7"
        out_num = out_name7
        out_event_num(event_num, out_num)
    else:
        btn_g7.hide()

    if out_name8 != '':

        event_num = f"8"
        out_num = out_name8
        out_event_num(event_num, out_num)
    else:
        btn_g8.hide()

    if out_name9 != '':

        event_num = f"9"
        out_num = out_name9
        out_event_num(event_num, out_num)
    else:
        btn_g9.hide()

    if out_name10 != '':

        event_num = f"10"
        out_num = out_name10
        out_event_num(event_num, out_num)
    else:
        btn_g10.hide()

    if out_name11 != '':

        event_num = f"11"
        out_num = out_name11
        out_event_num(event_num, out_num)
    else:
        btn_g11.hide()

    if out_name12 != '':

        event_num = f"12"
        out_num = out_name12
        out_event_num(event_num, out_num)
    else:
        btn_g12.hide()

    if out_name13 != '':

        event_num = f"13"
        out_num = out_name13
        out_event_num(event_num, out_num)
    else:
        btn_g13.hide()

    if out_name14 != '':

        event_num = f"14"
        out_num = out_name14
        out_event_num(event_num, out_num)
    else:
        btn_g14.hide()

    if out_name15 != '':

        event_num = f"15"
        out_num = out_name15
        out_event_num(event_num, out_num)
    else:
        btn_g15.hide()

    if out_name16 != '':

        event_num = f"16"
        out_num = out_name16
        out_event_num(event_num, out_num)
    else:
        btn_g16.hide()

    if out_name17 != '':

        event_num = f"17"
        out_num = out_name17
        out_event_num(event_num, out_num)
    else:
        btn_g17.hide()

    if out_name18 != '':

        event_num = f"18"
        out_num = out_name18
        out_event_num(event_num, out_num)
    else:
        btn_g18.hide()

    if out_name19 != '':

        event_num = f"19"
        out_num = out_name19
        out_event_num(event_num, out_num)
    else:
        btn_g19.hide()

    if out_name20 != '':

        event_num = f"20"
        out_num = out_name20
        out_event_num(event_num, out_num)
    else:
        btn_g20.hide()

    if out_name21 != '':

        event_num = f"21"
        out_num = out_name21
        out_event_num(event_num, out_num)
    else:
        btn_g21.hide()

    if out_name22 != '':

        event_num = f"22"
        out_num = out_name22
        out_event_num(event_num, out_num)
    else:
        btn_g22.hide()

    if out_name23 != '':

        event_num = f"23"
        out_num = out_name23
        out_event_num(event_num, out_num)
    else:
        btn_g23.hide()

    if out_name24 != '':

        event_num = f"24"
        out_num = out_name24
        out_event_num(event_num, out_num)
    else:
        btn_g24.hide()

    if out_name25 != '':

        event_num = f"25"
        out_num = out_name25
        out_event_num(event_num, out_num)
    else:
        btn_g25.hide()

    if out_name26 != '':

        event_num = f"26"
        out_num = out_name26
        out_event_num(event_num, out_num)
    else:
        btn_g26.hide()

    if out_name27 != '':

        event_num = f"27"
        out_num = out_name27
        out_event_num(event_num, out_num)
    else:
        btn_g27.hide()

    if out_name28 != '':

        event_num = f"28"
        out_num = out_name28
        out_event_num(event_num, out_num)
    else:
        btn_g28.hide()

    if out_name29 != '':

        event_num = f"29"
        out_num = out_name29
        out_event_num(event_num, out_num)
    else:
        btn_g29.hide()

    if out_name30 != '':

        event_num = f"30"
        out_num = out_name30
        out_event_num(event_num, out_num)
    else:
        btn_g30.hide()

    if out_name31 != '':

        event_num = f"31"
        out_num = out_name31
        out_event_num(event_num, out_num)
    else:
        btn_g31.hide()

    if out_name32 != '':

        event_num = f"32"
        out_num = out_name32
        out_event_num(event_num, out_num)
    else:
        btn_g32.hide()

##############################################___ECHO_FUNCTON___########################################################

def echo_func_name(func_name):

    func = func_name
    path_game = get_arg(get_path_game())

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    g_log = f"{sw_path}data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    if str(func) == str("ADD_SHORTCUT") or str(func) == str("ADD_FAVORITES"):
        cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
        subprocess.call(cmd, shell=True)
    else:
        cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
        subprocess.Popen(cmd, shell=True, start_new_session=True, stderr=sys.stderr, encoding='UTF-8')

################################################___MENU_BUTTONS___######################################################

def on_btn_about(self):

    sw_stack.set_visible_child_name("about_window")

def on_btn_back_ab(self):

    sw_stack.set_visible_child_name("page0")

def on_btn_hide(self):

    window.close()

def on_btn_text_edit(self):

    out_cmd = get_arg(get_out())
    text_edit_name = f"{sw_shortcuts}" + str(out_cmd) + str(".desktop")

    try:
        with open(text_edit_name, 'r') as ten:
            xdg_open_cmd = f"xdg-open {text_edit_name}"
            subprocess.call(xdg_open_cmd, shell=True)
    except IOError as e:
        print("unable to open text editor, game shortcut not found, shortcut must be created")

    popover.hide()
    g_popover1.hide()

def on_btn_g_text_edit(self):

    on_btn_text_edit(self)

def on_btn_app_icon(self):

    func_name = f"ADD_SHORTCUT"
    echo_func_name(func_name)
    popover.hide()
    g_popover1.hide()

def on_btn_app_icon2(self):

    on_btn_app_icon(self)

def on_btn_add_favorites(self):

    func_name = f"ADD_FAVORITES"
    echo_func_name(func_name)
    game_name_flow()
    get_favorites()

def on_btn_protondb(self):

    out_cmd = get_arg(get_out())
    btn_protondb.set_uri("https://www.protondb.com/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_protondb2(self):

    out_cmd = get_arg(get_out())
    btn_protondb2.set_uri("https://www.protondb.com/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_winehq(self):

    out_cmd = get_arg(get_out())
    btn_winehq.set_uri("https://www.winehq.org/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_winehq2(self):

    out_cmd = get_arg(get_out())
    btn_winehq2.set_uri("https://www.winehq.org/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_lp_entry(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)

    try:

        with open(games_config_name, 'r') as gc_name:

            lp_text = lp_entry.get_text()
            text = str(lp_text)
            print(lp_text)
            lp_cmd = f"sed -i 's/LAUNCH_PARAMETERS=\".*\"/LAUNCH_PARAMETERS=\"{text}\"/g' {games_config_name}"
            subprocess.call(lp_cmd, shell=True)

    except IOError as e:

        print("game games_config not found, set default value")

def on_btn_do_entry(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)

    try:

        with open(games_config_name, 'r') as gc_name:

            do_text = do_entry.get_text()
            text = str(do_text)
            print(do_text)
            do_cmd = f"sed -i 's/WINEDLLOVERRIDES=\".*\"/WINEDLLOVERRIDES=\"{text}\"/g' {games_config_name}"
            subprocess.call(do_cmd, shell=True)

    except IOError as e:

        print("game games_config not found, set default value")

def on_btn_games_config(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}" + str(out_cmd)

    try:

        with open(games_config_name, 'r') as gc_name:

            xdg_open_cmd = f"xdg-open {games_config_name}"
            subprocess.call(xdg_open_cmd, shell=True)

    except IOError as e:

        print("game games_config not found, set default value")

    popover.hide()
    g_popover1.hide()

###############################___START___##############################################################################

def progress():

    progressbar.pulse()
    return True

def set_text_done():

    progressbar.set_text('LOADED SUCCESSFULLY')

def on_btn_start(self):

    run_gamemode()

    ver = f"vulkaninfo | grep driverName | cut -d '=' -f2 | head -n1"
    proc = subprocess.run(ver, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')

    progressbar.set_show_text(True)
    progressbar.set_text('THE APP IS LOADING...')

    if str(vulkan_dri) == str(''):

        Thread(target=run_opengl).start()
        Thread(target=progress).start()

        pid_name_timeout = GLib.timeout_add(200, get_pid_name)
        progress_timeout = GLib.timeout_add(60, progress)

    else:
        if str(vulkan_dri) == str('llvmpipe'):

            Thread(target=run_opengl).start()
            Thread(target=progress).start()

            pid_name_timeout = GLib.timeout_add(200, get_pid_name)
            progress_timeout = GLib.timeout_add(60, progress)

        else:
            Thread(target=run_vulkan).start()
            Thread(target=progress).start()

            pid_name_timeout = GLib.timeout_add(200, get_pid_name)
            GLib.timeout_add(60, progress)

def get_pid_name():

    try:
        cmd = f"pgrep -fl .exe"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])
    except:
        print("error, process is not found")
        progressbar.set_text('oops!')
    else:
        if str(pid) == str("function.sh") or str(pid) == str("run.sh") or str(pid) == str("wine") or str(pid) == str("wine64") or str(pid) == str("winedevice.exe") or str(pid) == str("plugplay.exe") or str(pid) == str("svchost.exe") or str(pid) == str("explorer.exe") or str(pid) == str("rpcss.exe") or str(pid) == str("start.exe") or str(pid) == str("wineboot.exe") or str(pid) == str("rundll32.exe") or str(pid) == str("conhost.exe"):

            p = print(pid)
            return pid

        else:
            print("___done___")
            GLib.timeout_add(200, set_text_done)
            timeout = GLib.timeout_add(1000, Gtk.main_quit)

def run_vulkan():

    g_log = f"{sw_path}data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    func_name = f"RUN_VULKAN"
    echo_func_name(func_name)

def run_opengl():

    g_log = f"{sw_path}data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    func_name = f"RUN_OPENGL"
    echo_func_name(func_name)

def run_gamemode():

    gmod_log = f"{sw_path}data/tmp/log/gamemoded.log"
    sys.stderr = open(gmod_log, 'w')

    cmd_gmod = f"{sw_path}data/tools/utils/bin/gamemoded"
    proc = subprocess.Popen(cmd_gmod, shell=True, start_new_session=True, stderr=subprocess.STDOUT, stdout=sys.stderr, encoding='UTF-8')

#################################################___SHORTCUTS___########################################################

def on_btn_shortcuts(self):

    window.close()
    cmd = f"xdg-open {sw_shortcuts}"
    subprocess.call(cmd, shell=True)

################################################___CREATE_SHORTCUT___###################################################

def on_btn_create_shortcut(self):

    sw_stack.set_visible_child_name("create_shortcut_window")

def echo_cs_name(wine_name):

    wine_ver = wine_name
    path_game = get_arg(get_path_game())

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd_set = f"echo export SET='\"''{wine_ver}''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.call(cmd_set, shell=True)

    cmd = f"echo CREATE_SHORTCUT '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.Popen(cmd, shell=True, start_new_session=True)

def on_btn_cs_staging(self):

    Thread(target=cs_staging).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_staging():

    wine_name = f"wine_staging"
    echo_cs_name(wine_name)

def on_btn_cs_steam(self):

    Thread(target=cs_steam).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_steam():

    wine_name = f"wine_steam_proton"
    echo_cs_name(wine_name)

def on_btn_cs_ge(self):

    Thread(target=cs_ge).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_ge():

    wine_name = f"wine_proton_ge"
    echo_cs_name(wine_name)

def on_btn_cs_lutris(self):

    Thread(target=cs_lutris).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_lutris():

    wine_name = f"wine_lutris"
    echo_cs_name(wine_name)

def on_btn_cs_lutris_ge(self):

    Thread(target=cs_lutris_ge).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_lutris_ge():

    wine_name = f"wine_lutris_ge"
    echo_cs_name(wine_name)

def on_btn_cs_custom(self):

    def name_cs_custom_1():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n1 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_1.set_label(label = str(out_name))

    name_cs_custom_1()

    def name_cs_custom_2():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n2 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_2.set_label(label = str(out_name))

    name_cs_custom_2()

    def name_cs_custom_3():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n3 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_3.set_label(label = str(out_name))

    name_cs_custom_3()

    def name_cs_custom_4():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n4 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_4.set_label(label = str(out_name))

    name_cs_custom_4()

    def name_cs_custom_5():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n5 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_5.set_label(label = str(out_name))

    name_cs_custom_5()

def on_btn_cs_custom_1(self):

    Thread(target=cs_custom_1).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_1():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n1 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_2(self):

    Thread(target=cs_custom_2).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_2():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n2 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_3(self):

    Thread(target=cs_custom_3).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_3():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n3 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_4(self):

    Thread(target=cs_custom_4).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_4():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n4 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_5(self):

    Thread(target=cs_custom_5).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_5():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n5 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def progressbar_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_cs.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_cs.set_show_text(True)
            progressbar_cs.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        return pid

    except (IndexError, OSError) as e:
        print('___process is done___')
        progressbar_cs.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        game_name()
        sw_stack.set_visible_child_name("page0")
        progressbar_cs.set_text('')
        return False

def on_btn_back_cs(self):

    sw_stack.set_visible_child_name("page0")

############################___WINE_TOOLS___############################################################################

def on_btn_winetools(self):

    sw_stack.set_visible_child_name("winetools_window")

def on_btn_winecfg(self):

    Thread(target=winecfg).start()

def winecfg():

    func_name = f"WINECFG"
    echo_func_name(func_name)

def on_btn_wineconsole(self):

    Thread(target=wineconsole).start()

def wineconsole():

    func_name = f"WINECONSOLE"
    echo_func_name(func_name)

def on_btn_regedit(self):

    Thread(target=regedit).start()

def regedit():

    func_name = f"REGEDIT"
    echo_func_name(func_name)

def on_btn_file_explorer(self):

    Thread(target=explorer).start()

def explorer():

    func_name = f"WINEFILE"
    echo_func_name(func_name)

def on_btn_uninstaller(self):

    Thread(target=uninstaller).start()

def uninstaller():

    func_name = f"UNINSTALLER"
    echo_func_name(func_name)

def on_btn_winetricks(self):

    Thread(target=winetricks).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_WT).start()

    GLib.timeout_add(500, get_pid_name_WT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_WT)
        GLib.timeout_add(1000, pid_name_print_WT)

def winetricks():

    func_name = f"SW_WINETRICKS"
    echo_func_name(func_name)

def on_btn_install_libraries(self):

    Thread(target=install_rl).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_WT).start()

    GLib.timeout_add(500, get_pid_name_WT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_WT)
        GLib.timeout_add(1000, pid_name_print_WT)

def install_rl():

    func_name = f"INSTALL_RL"
    echo_func_name(func_name)

def progressbar_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_wt.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_wt.set_show_text(True)
            progressbar_wt.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])
        return pid

    except (IndexError, OSError) as e:
        progressbar_wt.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        progressbar_wt.set_text('')
        return False

def on_btn_back_wt(self):

    sw_stack.set_visible_child_name("page0")

###############################  PREFIX_TOOLS  #########################################################################

def on_btn_prefix_tools(self):

    sw_stack.set_visible_child_name("prefix_tools_window")

def on_btn_remove_prefix(self):

    Thread(target=remove_prefix).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)

def remove_prefix():

    func_name = f"REMOVE_PFX"
    echo_func_name(func_name)

def on_btn_reinstall_prefix(self):

    Thread(target=reinstall_prefix).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(1000, pid_name_print_PT)

def reinstall_prefix():

    func_name = f"REINSTALL_PFX"
    echo_func_name(func_name)

def on_btn_pfx_backup(self):

    Thread(target=pfx_backup).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_backup():

    func_name = f"SW_PFX_BACKUP"
    echo_func_name(func_name)

def on_btn_pfx_restore(self):

    Thread(target=pfx_restore).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_restore():

    func_name = f"SW_PFX_RESTORE"
    echo_func_name(func_name)

def on_btn_pfx_full_backup(self):

    Thread(target=pfx_full_backup).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_full_backup():

    func_name = f"SW_PFX_FULL_BACKUP"
    echo_func_name(func_name)

def on_btn_pfx_full_restore(self):

    Thread(target=pfx_full_restore).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_full_restore():

    func_name = f"SW_PFX_FULL_RESTORE"
    echo_func_name(func_name)

def progressbar_PT():

    try:

        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_pt.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_PT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_pt.set_show_text(True)
            progressbar_pt.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_iso():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            progressbar_pt.set_show_text(True)
            progressbar_pt.set_text('squashfs...')

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_PT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        return pid

    except (IndexError, OSError) as e:
        print('___process is done___')
        progressbar_pt.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        game_name()
        progressbar_pt.set_text('')
        return False

def on_btn_back_pt(self):

    sw_stack.set_visible_child_name("page0")

###################################################___DEBUG___##########################################################

def on_btn_debug(self):

    ver = f"vulkaninfo | grep driverName | cut -d '=' -f2 | head -n1"
    proc = subprocess.run(ver, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')

    if str(vulkan_dri) == str(''):

        Thread(target=debug_opengl).start()

    else:
        if str(vulkan_dri) == str('llvmpipe'):

            Thread(target=debug_opengl).start()

        else:
            Thread(target=debug_vulkan).start()

def debug_vulkan():

    func_name = f"DEBUG_VULKAN"
    echo_func_name(func_name)

def debug_opengl():

    func_name = f"DEBUG_OPENGL"
    echo_func_name(func_name)

#################################################___DOWNLOAD_WINE___####################################################

def on_btn_dw(self, widget=False, configuration=dict):

    sw_stack.set_visible_child_name("download_wine_window")

def echo_wine(wine_name):

    wine_num = wine_name

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd = f"echo {wine_num} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh"
    subprocess.call(cmd, shell=True)

def on_btn_wine_1(self):

    wine_name = f"WINE_1"
    echo_wine(wine_name)

def on_btn_rm_staging(self):

    wine_name = f"RM_WINE_1"
    echo_wine(wine_name)

def on_btn_wine_2(self):

    wine_name = f"WINE_2"
    echo_wine(wine_name)

def on_btn_rm_proton(self):

    wine_name = f"RM_WINE_2"
    echo_wine(wine_name)

def on_btn_wine_3(self):

    wine_name = f"WINE_3"
    echo_wine(wine_name)

def on_btn_rm_ge(self):

    wine_name = f"RM_WINE_3"
    echo_wine(wine_name)

def on_btn_wine_4(self):

    wine_name = f"WINE_4"
    echo_wine(wine_name)

def on_btn_rm_lutris(self):

    wine_name = f"RM_WINE_4"
    echo_wine(wine_name)

def on_btn_wine_5(self):

    wine_name = f"WINE_5"
    echo_wine(wine_name)

def on_btn_rm_lutris_ge(self):

    wine_name = f"RM_WINE_5"
    echo_wine(wine_name)

def on_btn_wine_6(self):

    cmd = f"xdg-open {sw_path}data/wine/wine_custom"
    subprocess.Popen(cmd, shell=True)

def on_btn_back_dw(self):

    sw_stack.set_visible_child_name("page0")

###################################################___SETTINGS___#######################################################

def on_btn_settings(self):

    sw_stack.set_visible_child_name("settings_window")

    def on_dxvk_ge_activated(dxvk_ge):

        if dxvk_ge.get_active():

            state = "on"
            command = f"sed -i '20 s/.*/020_DXVK_GE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/020/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_vkd3d_ge_activated(vkd3d_ge):

        if vkd3d_ge.get_active():

            state = "on"
            command = f"sed -i '21 s/.*/021_VKD3D_GE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/021/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_dxvk_native_activated(dxvk_native):

        if dxvk_native.get_active():

            state = "on"
            command = f"sed -i '20 s/.*/020_DXVK_NATIVE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/020/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_vkd3d_native_activated(vkd3d_native):

        if vkd3d_native.get_active():

            state = "on"
            command = f"sed -i '21 s/.*/021_VKD3D_NATIVE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/021/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_DLSYM_activated(DLSYM, gparam):

        if DLSYM.get_active():

            state = "on"
            command = f"sed -i '1 s/.*/001_MANGOHUD_DLSYM/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/001/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_MHUD_activated(MHUD, gparam):

        if MHUD.get_active():

            state = "on"
            command = f"sed -i '2 s/.*/002_MANGOHUD/' {sw_scripts}settings"
            subprocess.run(command, shell=True)
            CompletedProcess(command, returncode=0)

        else:

            state = "off"
            command = f"sed -i '/002/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)
            CompletedProcess(command, returncode=0)

    def on_GAMEMODE_activated(GAMEMODE, gparam):

        if GAMEMODE.get_active():

            state = "on"
            command = f"sed -i '3 s/.*/003_GAMEMODE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/003/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_RUNTIME_activated(RUNTIME, gparam):

        if RUNTIME.get_active():

            state = "on"
            command = f"sed -i '4 s/.*/004_RUNTIME/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/004/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_RESTORE_RESOLUTION_activated(RESTORE_RESOLUTION, gparam):

        if RESTORE_RESOLUTION.get_active():

            state = "on"
            command = f"sed -i '5 s/.*/005_RESTORE_RESOLUTION/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/005/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_VIRTUAL_DESKTOP_activated(VIRTUAL_DESKTOP, gparam):

        if VIRTUAL_DESKTOP.get_active():

            state = "on"
            command = f"sed -i '6 s/.*/006_VIRTUAL_DESKTOP/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/006/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_FSYNC_activated(FSYNC, gparam):

        if FSYNC.get_active():

            state = "on"
            command = f"sed -i '7 s/.*/007_FSYNC/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/007/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_ESYNC_activated(ESYNC, gparam):

        if ESYNC.get_active():

            state = "on"
            command = f"sed -i '8 s/.*/008_ESYNC/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/008/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_OLD_GL_STRING_activated(OLD_GL_STRING, gparam):

        if OLD_GL_STRING.get_active():

            state = "on"
            command = f"sed -i '9 s/.*/009_OLD_GL_STRING/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/009/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_NVAPI_DISABLE_activated(NVAPI_DISABLE, gparam):

        if NVAPI_DISABLE.get_active():

            state = "on"
            command = f"sed -i '10 s/.*/010_NVAPI_DISABLE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/010/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_WINEDBG_DISABLE_activated(WINEDBG_DISABLE, gparam):

        if WINEDBG_DISABLE.get_active():

            state = "on"
            command = f"sed -i '11 s/.*/011_WINEDBG_DISABLE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/011/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_LARGE_ADDRESS_AWARE_activated(LARGE_ADDRESS_AWARE, gparam):

        if LARGE_ADDRESS_AWARE.get_active():

            state = "on"
            command = f"sed -i '12 s/.*/012_LARGE_ADDRESS_AWARE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/012/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_STAGING_WRITECOPY_activated(STAGING_WRITECOPY, gparam):

        if STAGING_WRITECOPY.get_active():

            state = "on"
            command = f"sed -i '13 s/.*/013_STAGING_WRITECOPY/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/013/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_STAGING_SHARED_MEMORY_activated(STAGING_SHARED_MEMORY, gparam):

        if STAGING_SHARED_MEMORY.get_active():

            state = "on"
            command = f"sed -i '14 s/.*/014_STAGING_SHARED_MEMORY/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/014/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_DXVK_HUD_activated(DXVK_HUD, gparam):

        if DXVK_HUD.get_active():

            state = "on"
            command = f"sed -i '15 s/.*/015_DXVK_HUD/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/015/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_DXVK_ASYNC_activated(DXVK_ASYNC, gparam):

        if DXVK_ASYNC.get_active():

            state = "on"
            command = f"sed -i '16 s/.*/016_DXVK_ASYNC/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/016/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_VKBASALT_activated(VKBASALT, gparam):

        if VKBASALT.get_active():

            state = "on"
            command = f"sed -i '17 s/.*/017_VKBASALT/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/017/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_FSR_activated(FSR, gparam):

        if FSR.get_active():

            state = "on"
            command = f"sed -i '18 s/.*/018_FSR/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/018/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_GSTREAMER_activated(GSTREAMER, gparam):

        if GSTREAMER.get_active():

            state = "on"
            command = f"sed -i '19 s/.*/019_GSTREAMER/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/019/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_DRI_PRIME_activated(DRI_PRIME, gparam):

        if DRI_PRIME.get_active():

            state = "on"
            command = f"sed -i '22 s/.*/022_DRI_PRIME/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/022/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def on_MONO_ENABLE_activated(MONO_ENABLE, gparam):

        if MONO_ENABLE.get_active():

            state = "on"
            command = f"sed -i '24 s/.*/024_MONO_ENABLE/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

        else:

            state = "off"
            command = f"sed -i '/024/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

#############################___SWITCH BUTTON___########################################################################

    dxvk_ge = builder.get_object("dxvk_ge")
    dxvk_ge.connect("toggled", on_dxvk_ge_activated)

    def dxvk_ge_active():

        dxvk_cmd = f"sed -n '/020/p' {sw_scripts}/settings"
        proc = subprocess.run(dxvk_cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dxvk_cmd_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dxvk_cmd_name) == str('020_DXVK_GE'):

            dxvk_ge.set_active(True)

        else:

            dxvk_ge.set_active(False)

    dxvk_ge_active()

    vkd3d_ge = builder.get_object("vkd3d_ge")
    vkd3d_ge.connect("toggled", on_vkd3d_ge_activated)

    def vkd3d_ge_active():

        vkd3d_cmd = f"sed -n '/021/p' {sw_scripts}/settings"
        proc = subprocess.run(vkd3d_cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        vkd3d_cmd_name = str(proc.stdout[0:]).replace('\n', '')

        if str(vkd3d_cmd_name) == str('021_VKD3D_GE'):

            vkd3d_ge.set_active(True)

        else:

            vkd3d_ge.set_active(False)

    vkd3d_ge_active()

    dxvk_native = builder.get_object("dxvk_native")
    dxvk_native.connect("toggled", on_dxvk_native_activated)

    def dxvk_native_active():

        dxvk_cmd = f"sed -n '/001/p' {sw_scripts}/settings"
        proc = subprocess.run(dxvk_cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dxvk_cmd_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dxvk_cmd_name) == str('020_DXVK_NATIVE'):

            dxvk_native.set_active(True)

        else:

            dxvk_native.set_active(False)

    dxvk_native_active()

    vkd3d_native = builder.get_object("vkd3d_native")
    vkd3d_native.connect("toggled", on_vkd3d_native_activated)

    def vkd3d_native_active():

        vkd3d_cmd = f"sed -n '/001/p' {sw_scripts}/settings"
        proc = subprocess.run(vkd3d_cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        vkd3d_cmd_name = str(proc.stdout[0:]).replace('\n', '')

        if str(vkd3d_cmd_name) == str('021_VKD3D_NATIVE'):

            vkd3d_native.set_active(True)

        else:

            vkd3d_native.set_active(False)

    vkd3d_native_active()

    DLSYM = builder.get_object("DLSYM")
    DLSYM.connect("notify::active", on_DLSYM_activated)

    def dlsym():

        dlsym = f"sed -n '/001/p' {sw_scripts}/settings"
        proc = subprocess.run(dlsym, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dlsym_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dlsym_name) == str('001_MANGOHUD_DLSYM'):

            DLSYM.set_active(True)

        else:

            DLSYM.set_active(False)

    dlsym()

    MHUD = builder.get_object("MHUD")
    MHUD.connect("notify::active", on_MHUD_activated)

    def mhud():

        mhud = f"sed -n '/002/p' {sw_scripts}/settings"
        proc = subprocess.run(mhud, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        mhud_name = str(proc.stdout[0:]).replace('\n', '')

        if str(mhud_name) == str('002_MANGOHUD'):

            MHUD.set_active(True)

        else:

            MHUD.set_active(False)

    mhud()

    GAMEMODE = builder.get_object("GAMEMODE")
    GAMEMODE.connect("notify::active", on_GAMEMODE_activated)

    def gamemode():

        gamemode = f"sed -n '/003/p' {sw_scripts}/settings"
        proc = subprocess.run(gamemode, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        gamemode_name = str(proc.stdout[0:]).replace('\n', '')

        if str(gamemode_name) == str('003_GAMEMODE'):

            GAMEMODE.set_active(True)

        else:

            GAMEMODE.set_active(False)

    gamemode()

    RUNTIME = builder.get_object("RUNTIME")
    RUNTIME.connect("notify::active", on_RUNTIME_activated)

    def runtime():

        runtime = f"sed -n '/004/p' {sw_scripts}/settings"
        proc = subprocess.run(runtime, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        runtime_name = str(proc.stdout[0:]).replace('\n', '')

        if str(runtime_name) == str('004_RUNTIME'):

            RUNTIME.set_active(True)

        else:

            RUNTIME.set_active(False)

    runtime()

    RESTORE_RESOLUTION = builder.get_object("RESTORE_RESOLUTION")
    RESTORE_RESOLUTION.connect("notify::active", on_RESTORE_RESOLUTION_activated)

    def resres():

        resres = f"sed -n '/005/p' {sw_scripts}/settings"
        proc = subprocess.run(resres, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        resres_name = str(proc.stdout[0:]).replace('\n', '')

        if str(resres_name) == str('005_RESTORE_RESOLUTION'):

            RESTORE_RESOLUTION.set_active(True)

        else:

            RESTORE_RESOLUTION.set_active(False)

    resres()

    VIRTUAL_DESKTOP = builder.get_object("VIRTUAL_DESKTOP")
    VIRTUAL_DESKTOP.connect("notify::active", on_VIRTUAL_DESKTOP_activated)

    def virdesk():

        virdesk = f"sed -n '/006/p' {sw_scripts}/settings"
        proc = subprocess.run(virdesk, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        virdesk_name = str(proc.stdout[0:]).replace('\n', '')

        if str(virdesk_name) == str('006_VIRTUAL_DESKTOP'):

            VIRTUAL_DESKTOP.set_active(True)

        else:

            VIRTUAL_DESKTOP.set_active(False)

    virdesk()

    FSYNC = builder.get_object("FSYNC")
    FSYNC.connect("notify::active", on_FSYNC_activated)

    def fsync():

        fsync = f"sed -n '/007/p' {sw_scripts}/settings"
        proc = subprocess.run(fsync, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        fsync_name = str(proc.stdout[0:]).replace('\n', '')

        if str(fsync_name) == str('007_FSYNC'):

            FSYNC.set_active(True)

        else:

            FSYNC.set_active(False)

    fsync()

    ESYNC = builder.get_object("ESYNC")
    ESYNC.connect("notify::active", on_ESYNC_activated)

    def esync():

        esync = f"sed -n '/008/p' {sw_scripts}/settings"
        proc = subprocess.run(esync, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        esync_name = str(proc.stdout[0:]).replace('\n', '')

        if str(esync_name) == str('008_ESYNC'):

            ESYNC.set_active(True)

        else:

            ESYNC.set_active(False)

    esync()

    OLD_GL_STRING = builder.get_object("OLD_GL_STRING")
    OLD_GL_STRING.connect("notify::active", on_OLD_GL_STRING_activated)

    def glstring():

        glstring = f"sed -n '/009/p' {sw_scripts}/settings"
        proc = subprocess.run(glstring, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        glstring_name = str(proc.stdout[0:]).replace('\n', '')

        if str(glstring_name) == str('009_OLD_GL_STRING'):

            OLD_GL_STRING.set_active(True)

        else:

            OLD_GL_STRING.set_active(False)

    glstring()

    NVAPI_DISABLE = builder.get_object("NVAPI_DISABLE")
    NVAPI_DISABLE.connect("notify::active", on_NVAPI_DISABLE_activated)

    def nvapi():

        nvapi = f"sed -n '/010/p' {sw_scripts}/settings"
        proc = subprocess.run(nvapi, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        nvapi_name = str(proc.stdout[0:]).replace('\n', '')

        if str(nvapi_name) == str('010_NVAPI_DISABLE'):

            NVAPI_DISABLE.set_active(True)

        else:

            NVAPI_DISABLE.set_active(False)

    nvapi()

    WINEDBG_DISABLE = builder.get_object("WINEDBG_DISABLE")
    WINEDBG_DISABLE.connect("notify::active", on_WINEDBG_DISABLE_activated)

    def winedbg():

        winedbg = f"sed -n '/011/p' {sw_scripts}/settings"
        proc = subprocess.run(winedbg, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        winedbg_name = str(proc.stdout[0:]).replace('\n', '')

        if str(winedbg_name) == str('011_WINEDBG_DISABLE'):

            WINEDBG_DISABLE.set_active(True)

        else:

            WINEDBG_DISABLE.set_active(False)

    winedbg()

    LARGE_ADDRESS_AWARE = builder.get_object("LARGE_ADDRESS_AWARE")
    LARGE_ADDRESS_AWARE.connect("notify::active", on_LARGE_ADDRESS_AWARE_activated)

    def large_aa():

        large_aa = f"sed -n '/012/p' {sw_scripts}/settings"
        proc = subprocess.run(large_aa, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        large_aa_name = str(proc.stdout[0:]).replace('\n', '')

        if str(large_aa_name) == str('012_LARGE_ADDRESS_AWARE'):

            LARGE_ADDRESS_AWARE.set_active(True)

        else:

            LARGE_ADDRESS_AWARE.set_active(False)

    large_aa()

    STAGING_WRITECOPY = builder.get_object("STAGING_WRITECOPY")
    STAGING_WRITECOPY.connect("notify::active", on_STAGING_WRITECOPY_activated)

    def staging_w():

        staging_w = f"sed -n '/013/p' {sw_scripts}/settings"
        proc = subprocess.run(staging_w, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        staging_w_name = str(proc.stdout[0:]).replace('\n', '')

        if str(staging_w_name) == str('013_STAGING_WRITECOPY'):

            STAGING_WRITECOPY.set_active(True)

        else:

            STAGING_WRITECOPY.set_active(False)

    staging_w()

    STAGING_SHARED_MEMORY = builder.get_object("STAGING_SHARED_MEMORY")
    STAGING_SHARED_MEMORY.connect("notify::active", on_STAGING_SHARED_MEMORY_activated)

    def staging_s():

        staging_s = f"sed -n '/014/p' {sw_scripts}/settings"
        proc = subprocess.run(staging_s, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        staging_s_name = str(proc.stdout[0:]).replace('\n', '')

        if str(staging_s_name) == str('014_STAGING_SHARED_MEMORY'):

            STAGING_SHARED_MEMORY.set_active(True)

        else:

            STAGING_SHARED_MEMORY.set_active(False)

    staging_s()

    DXVK_HUD = builder.get_object("DXVK_HUD")
    DXVK_HUD.connect("notify::active", on_DXVK_HUD_activated)

    def dxvk_hud():

        dxvk_hud = f"sed -n '/015/p' {sw_scripts}/settings"
        proc = subprocess.run(dxvk_hud, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dxvk_hud_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dxvk_hud_name) == str('015_DXVK_HUD'):

            DXVK_HUD.set_active(True)

        else:

            DXVK_HUD.set_active(False)

    dxvk_hud()

    DXVK_ASYNC = builder.get_object("DXVK_ASYNC")
    DXVK_ASYNC.connect("notify::active", on_DXVK_ASYNC_activated)

    def dxvk_async():

        dxvk_async = f"sed -n '/016/p' {sw_scripts}/settings"
        proc = subprocess.run(dxvk_async, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dxvk_async_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dxvk_async_name) == str('016_DXVK_ASYNC'):

            DXVK_ASYNC.set_active(True)

        else:

            DXVK_ASYNC.set_active(False)

    dxvk_async()

    VKBASALT = builder.get_object("VKBASALT")
    VKBASALT.connect("notify::active", on_VKBASALT_activated)

    def vkbasalt():

        vkbasalt = f"sed -n '/017/p' {sw_scripts}/settings"
        proc = subprocess.run(vkbasalt, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        vkbasalt_name = str(proc.stdout[0:]).replace('\n', '')

        if str(vkbasalt_name) == str('017_VKBASALT'):

            VKBASALT.set_active(True)

        else:

            VKBASALT.set_active(False)

    vkbasalt()

    FSR = builder.get_object("FSR")
    FSR.connect("notify::active", on_FSR_activated)

    def fsr():

        fsr = f"sed -n '/018/p' {sw_scripts}/settings"
        proc = subprocess.run(fsr, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        fsr_name = str(proc.stdout[0:]).replace('\n', '')

        if str(fsr_name) == str('018_FSR'):

            FSR.set_active(True)

        else:

            FSR.set_active(False)

    fsr()

    GSTREAMER = builder.get_object("GSTREAMER")
    GSTREAMER.connect("notify::active", on_GSTREAMER_activated)

    def gstreamer():

        gstreamer = f"sed -n '/019/p' {sw_scripts}/settings"
        proc = subprocess.run(gstreamer, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        gstreamer_name = str(proc.stdout[0:]).replace('\n', '')

        if str(gstreamer_name) == str('019_GSTREAMER'):

            GSTREAMER.set_active(True)

        else:

            GSTREAMER.set_active(False)

    gstreamer()

    DRI_PRIME = builder.get_object("DRI_PRIME")
    DRI_PRIME.connect("notify::active", on_DRI_PRIME_activated)

    def dri_prime():

        dri_prime = f"sed -n '/022/p' {sw_scripts}/settings"
        proc = subprocess.run(dri_prime, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        dri_prime_name = str(proc.stdout[0:]).replace('\n', '')

        if str(dri_prime_name) == str('022_DRI_PRIME'):

            DRI_PRIME.set_active(True)

        else:

            DRI_PRIME.set_active(False)

    dri_prime()

    MONO_ENABLE = builder.get_object("MONO_ENABLE")
    MONO_ENABLE.connect("notify::active", on_MONO_ENABLE_activated)

    def mono_enable():

        mono_enable = f"sed -n '/024/p' {sw_scripts}/settings"
        proc = subprocess.run(mono_enable, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        mono_enable_name = str(proc.stdout[0:]).replace('\n', '')

        if str(mono_enable_name) == str('024_MONO_ENABLE'):

            MONO_ENABLE.set_active(True)

        else:

            MONO_ENABLE.set_active(False)

    mono_enable()

def on_btn_back_st(self):

    sw_stack.set_visible_child_name("page0")

###############################################___KILL_PROCESS___#######################################################

def on_btn_stop(self):

    cmd = f"{sw_scripts}stop"
    subprocess.call(cmd, shell=True)

############################################___BUILDER_GET_SW_WINDOW___#################################################

builder = Gtk.Builder()
builder.add_from_file(f"{sw_scripts}sw_menu.glade")

window = builder.get_object("StartWine")

sw_stack = builder.get_object("sw_stack")
sw_stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)

############################################___BUILDER_GET_SW_BUTTONS___################################################

btn_about = builder.get_object("btn_about")
btn_about.connect("clicked", on_btn_about)

about = builder.get_object("about_window")

btn_hide = builder.get_object("btn_hide")
btn_hide.connect("clicked", on_btn_hide)

popover = builder.get_object("popover")
popover2 = builder.get_object("popover2")

btn_text_edit = builder.get_object("btn_text_edit")
btn_text_edit.connect("clicked", on_btn_text_edit)

btn_app_icon = builder.get_object("btn_app_icon")
btn_app_icon.connect("clicked", on_btn_app_icon)

btn_app_icon2 = builder.get_object("btn_app_icon2")
btn_app_icon2.connect("clicked", on_btn_app_icon)

btn_add_favorites = builder.get_object("btn_add_favorites")
btn_add_favorites.connect("clicked", on_btn_add_favorites)

favorites_btn_stack = builder.get_object("favorites_btn_stack")
favorites_scrolled = builder.get_object("favorites_scrolled")
favorites_main_box = builder.get_object("favorites_main_box")

btn_get_favorites = builder.get_object("btn_get_favorites")
btn_get_favorites.connect("clicked", on_btn_get_favorites)

btn_hide_favorites = builder.get_object("btn_hide_favorites")
btn_hide_favorites.connect("clicked", on_btn_hide_favorites)

btn_back_fs = builder.get_object("btn_back_fs")
btn_back_fs.connect("clicked", on_btn_back_fs)

btn_back_app_conf = builder.get_object("btn_back_app_conf")
btn_back_app_conf.connect("clicked", on_btn_back_app_conf)

app_conf_scrolled = builder.get_object("app_conf_scrolled")
app_conf_text = builder.get_object("app_conf_text")

btn_app_conf_save = builder.get_object("btn_app_conf_save")
btn_app_conf_save.connect("clicked", on_btn_app_conf_save)

btn_app_conf_default = builder.get_object("btn_app_conf_default")
btn_app_conf_default.connect("clicked", on_btn_app_conf_default)

app_settings_label = builder.get_object("app_conf_label")

settings_scrolled = builder.get_object("settings_scrolled")
settings_scrolled = builder.get_object("settings_scrolled")

themes_stack = builder.get_object("themes_stack")

btn_protondb = builder.get_object("btn_protondb")
btn_protondb.connect("activate-link", on_btn_protondb)

btn_protondb2 = builder.get_object("btn_protondb2")
btn_protondb2.connect("activate-link", on_btn_protondb2)

btn_winehq = builder.get_object("btn_winehq")
btn_winehq.connect("activate-link", on_btn_winehq)

btn_winehq2 = builder.get_object("btn_winehq2")
btn_winehq2.connect("activate-link", on_btn_winehq2)

lp_entry = builder.get_object("lp_entry")
lp_entry.set_activates_default(True)
lp_entry.connect("activate", on_btn_lp_entry)

lp_icon = f"{sw_icon}gui_icons/regedit.svg"
lp_pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(lp_icon, 16, 16, preserve_aspect_ratio=True)

lp_entry.set_icon_activatable(0, True)
lp_entry.set_icon_sensitive(0, True)

btn_lp_entry = builder.get_object("btn_lp_entry")
btn_lp_entry.connect("clicked", on_btn_lp_entry)

do_entry = builder.get_object("do_entry")
do_entry.set_activates_default(True)
do_entry.connect("activate", on_btn_do_entry)

btn_do_entry = builder.get_object("btn_do_entry")
btn_do_entry.connect("clicked", on_btn_do_entry)

btn_games_config = builder.get_object("btn_games_config")
btn_games_config.connect("clicked", on_btn_games_config)

########################################___BACKGROUND_COLOR_GET_RESOLUTION___###########################################

def get_resolution():

    width = f"xrandr | grep '*' | cut -d 'x' -f1 | sed 's/ //g' | head -n1"
    height = f"xrandr | grep '*' | cut -d 'x' -f2 | cut -d ' ' -f1 | head -n1"
    out_name_1 = str(subprocess.run(width, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    out_name_2 = str(subprocess.run(height, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')

    print(out_name_1 + "x" + out_name_2)

    def get_css(css_name):

        css = css_name

        screen = Gdk.Screen.get_default()
        provider = Gtk.CssProvider()
        style_context = Gtk.StyleContext()
        style_context.add_provider_for_screen(
            screen, provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )
        provider.load_from_path(css)

    def on_btn_black_theme(self):

        if btn_black_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_black_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def black_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_black_theme'):

            css_name = f"{sw_css_dark}black/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg1"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("black_theme_off")

    black_theme()

    def on_btn_gray_theme(self):

        if btn_gray_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_gray_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def gray_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_gray_theme'):

            css_name = f"{sw_css_dark}grey/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg2"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("gray_theme_off")

    gray_theme()

    def on_btn_red_theme(self):

        if btn_red_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_red_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def red_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_red_theme'):

            css_name = f"{sw_css_dark}red/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg3"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("red_theme_off")

    red_theme()

    def on_btn_yellow_theme(self):

        if btn_yellow_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_yellow_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def yellow_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_yellow_theme'):

            css_name = f"{sw_css_dark}yellow/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg4"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("yellow_theme_off")

    yellow_theme()

    def on_btn_green_theme(self):

        if btn_green_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_green_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def green_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_green_theme'):

            css_name = f"{sw_css_dark}green/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg5"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("green_theme_off")

    green_theme()

    def on_btn_blue_theme(self):

        if btn_blue_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_blue_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def blue_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_blue_theme'):

            css_name = f"{sw_css_dark}blue/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg6"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("blue_theme_off")

    blue_theme()

    def on_btn_purple_theme(self):

        if btn_purple_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_purple_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def purple_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_purple_theme'):

            css_name = f"{sw_css_dark}purple/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg7"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("purple_theme_off")

    purple_theme()

    def on_btn_mix_theme(self):

        if btn_mix_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_mix_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def mix_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_mix_theme'):

            css_name = f"{sw_css_dark}brown/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg8"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("mix_theme_off")

    mix_theme()

    def on_btn_white_theme(self):

        if btn_white_theme.get_active():

            state = "on"
            command = f"sed -i '23 s/.*/023_white_theme/' {sw_scripts}settings"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:

            state = "off"
            command = f"sed -i '/023/g' {sw_scripts}settings"
            subprocess.call(command, shell=True)

    def white_theme():

        sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('023_white_theme'):

            css_name = f"{sw_css_light}black/gtk-3.0/gtk.css"
            get_css(css_name)
            img_path = f"{sw_icon}gui_icons/sw_themes/4k/sw_bg0"
            image = builder.get_object("sw_bgrw")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)

        else:

            print("")

    white_theme()

    btn_black_theme = builder.get_object("btn_black_theme")
    btn_black_theme.connect("toggled", on_btn_black_theme)

    btn_gray_theme = builder.get_object("btn_gray_theme")
    btn_gray_theme.connect("toggled", on_btn_gray_theme)

    btn_red_theme = builder.get_object("btn_red_theme")
    btn_red_theme.connect("toggled", on_btn_red_theme)

    btn_yellow_theme = builder.get_object("btn_yellow_theme")
    btn_yellow_theme.connect("toggled", on_btn_yellow_theme)

    btn_green_theme = builder.get_object("btn_green_theme")
    btn_green_theme.connect("toggled", on_btn_green_theme)

    btn_blue_theme = builder.get_object("btn_blue_theme")
    btn_blue_theme.connect("toggled", on_btn_blue_theme)

    btn_purple_theme = builder.get_object("btn_purple_theme")
    btn_purple_theme.connect("toggled", on_btn_purple_theme)

    btn_mix_theme = builder.get_object("btn_mix_theme")
    btn_mix_theme.connect("toggled", on_btn_mix_theme)

    btn_white_theme = builder.get_object("btn_white_theme")
    btn_white_theme.connect("toggled", on_btn_white_theme)

get_resolution()

###############################################___START_MODE_PARSE___###################################################

def game_name():

    out_cmd = get_arg(get_out())
    print(out_cmd)

    def desktop_wine():

        desktop_name = f"{sw_shortcuts}" + str(out_cmd) + '.desktop'
        desktop_sw = f"{sw_path}" + 'StartWine.desktop'

        try:

            with open(desktop_name, 'r') as desktop:

                data = desktop.read().replace('=', '\n')
                data_split = data.split()
                lst = list()
                lst.append(data_split[-1])
                ls_wine = str(lst).strip('\'[').strip(']\'').replace('wine_', 'WINE:\n')
                print(ls_wine)

        except IOError as e:
            print("game desktop not found, set default value")

            with open(desktop_sw, 'r') as desktop:
                data = desktop.read().replace('=', '\n')
                data_split = data.split()
                lst = list()
                lst.append(data_split[-1])
                ls_wine = str(lst).strip('\'[').strip(']\'').replace('wine_', 'WINE:\n')

                print(ls_wine)

        def desktop_icon():

            try:

                icon_path = open(f"{sw_icon}" + str(out_cmd) + '_x96.png')

            except IOError as e:

                print("icon not found, set default icon")
                icon_path = f"{sw_icon}gui_icons/" + 'SW_Launcher_x96.png'

            else:

                icon_path = f"{sw_icon}" + str(out_cmd) + '_x96.png'

            def desktop_pfx():

                file_name = f"{sw_shortcuts}" + str(out_cmd) + '.desktop'

                try:

                    with open(file_name, 'r') as desktop:

                        data = desktop.read().replace('=', '\n')
                        data_split = data.split()
                        lst = list()
                        lst.append(data_split[5])
                        ls_pfx = str(lst).strip('\'[').strip(']\'').replace('pfx_', 'pfx_:\n').replace('default_', 'pfx_\ndefault\n')
                        n_pfx = ls_pfx.split()
                        n_lst = list()
                        n_lst.append(n_pfx[1])
                        pfx = str(n_lst).strip('\'[').strip(']\'')

                    print(pfx)

                except IOError as e:

                    print("game desktop not found, set default value")
                    game_icon = builder.get_object("game_icon")
                    game_icon.set_from_file(icon_path)
                    game_label1 = builder.get_object("game_label1")
                    game_label1.set_label('START MODE')
                    game_label2 = builder.get_object("game_label2")
                    game_label2.set_label("PREFIX:\ndefault")
                    game_label3 = builder.get_object("game_label3")
                    game_label3.set_label(str(ls_wine))

                else:

                    game_icon = builder.get_object("game_icon")
                    game_icon.set_from_file(icon_path)
                    game_label1 = builder.get_object("game_label1")
                    game_label1.set_label('START MODE')
                    game_label2 = builder.get_object("game_label2")
                    game_label2.set_label('PREFIX:\n' + str(pfx))
                    game_label3 = builder.get_object("game_label3")
                    game_label3.set_label(str(ls_wine))

            desktop_pfx()
        desktop_icon()
    desktop_wine()
game_name()

btn_start = builder.get_object("btn_start")
btn_start.connect("clicked", on_btn_start)

btn_shortcuts = builder.get_object("btn_shortcuts")
btn_shortcuts.connect("clicked", on_btn_shortcuts)

############################################___CREATE_SHORTCUT_BUILDER___###############################################

btn_create_shortcut = builder.get_object("btn_create_shortcut")
btn_create_shortcut.connect("clicked", on_btn_create_shortcut)

btn_cs_staging = builder.get_object("btn_cs_staging")
btn_cs_staging.connect("clicked", on_btn_cs_staging)

btn_cs_steam = builder.get_object("btn_cs_steam")
btn_cs_steam.connect("clicked", on_btn_cs_steam)

btn_cs_ge = builder.get_object("btn_cs_ge")
btn_cs_ge.connect("clicked", on_btn_cs_ge)

btn_cs_lutris = builder.get_object("btn_cs_lutris")
btn_cs_lutris.connect("clicked", on_btn_cs_lutris)

btn_cs_lutris_ge = builder.get_object("btn_cs_lutris_ge")
btn_cs_lutris_ge.connect("clicked", on_btn_cs_lutris_ge)

btn_cs_custom = builder.get_object("btn_cs_custom")
btn_cs_custom.connect("clicked", on_btn_cs_custom)

btn_cs_custom_1 = builder.get_object("btn_cs_custom_1")
btn_cs_custom_1.connect("clicked", on_btn_cs_custom_1)

btn_cs_custom_2 = builder.get_object("btn_cs_custom_2")
btn_cs_custom_2.connect("clicked", on_btn_cs_custom_2)

btn_cs_custom_3 = builder.get_object("btn_cs_custom_3")
btn_cs_custom_3.connect("clicked", on_btn_cs_custom_3)

btn_cs_custom_4 = builder.get_object("btn_cs_custom_4")
btn_cs_custom_4.connect("clicked", on_btn_cs_custom_4)

btn_cs_custom_5 = builder.get_object("btn_cs_custom_5")
btn_cs_custom_5.connect("clicked", on_btn_cs_custom_5)

#############################################___PREFIX_TOOLS_BUILDER___#################################################

btn_prefix_tools = builder.get_object("btn_prefix_tools")
btn_prefix_tools.connect("clicked", on_btn_prefix_tools)

btn_remove_prefix = builder.get_object("btn_remove_prefix")
btn_remove_prefix.connect("clicked", on_btn_remove_prefix)

btn_reinstall_prefix = builder.get_object("btn_reinstall_prefix")
btn_reinstall_prefix.connect("clicked", on_btn_reinstall_prefix)

btn_pfx_backup = builder.get_object("btn_pfx_backup")
btn_pfx_backup.connect("clicked", on_btn_pfx_backup)

btn_pfx_restore = builder.get_object("btn_pfx_restore")
btn_pfx_restore.connect("clicked", on_btn_pfx_restore)

btn_pfx_full_backup = builder.get_object("btn_pfx_full_backup")
btn_pfx_full_backup.connect("clicked", on_btn_pfx_full_backup)

btn_pfx_full_restore = builder.get_object("btn_pfx_full_restore")
btn_pfx_full_restore.connect("clicked", on_btn_pfx_full_restore)

##############################################___WINE_TOOLS_BUILDER___##################################################

btn_winetools = builder.get_object("btn_winetools")
btn_winetools.connect("clicked", on_btn_winetools)

btn_winecfg = builder.get_object("btn_winecfg")
btn_winecfg.connect("clicked", on_btn_winecfg)

btn_wineconsole = builder.get_object("btn_wineconsole")
btn_wineconsole.connect("clicked", on_btn_wineconsole)

btn_regedit = builder.get_object("btn_regedit")
btn_regedit.connect("clicked", on_btn_regedit)

btn_file_explorer = builder.get_object("btn_file_explorer")
btn_file_explorer.connect("clicked", on_btn_file_explorer)

btn_uninstaller = builder.get_object("btn_uninstaller")
btn_uninstaller.connect("clicked", on_btn_uninstaller)

btn_winetricks = builder.get_object("btn_winetricks")
btn_winetricks.connect("clicked", on_btn_winetricks)

btn_install_libraries = builder.get_object("btn_install_libraries")
btn_install_libraries.connect("clicked", on_btn_install_libraries)

progressbar_wt = builder.get_object("progressbar_wt")
progressbar_pt = builder.get_object("progressbar_pt")
progressbar_cs = builder.get_object("progressbar_cs")

################################################___DEBUG_BUILDER___#####################################################

btn_debug = builder.get_object("btn_debug")
btn_debug.connect("clicked", on_btn_debug)

############################################___DOWNLOAD_WINE_BUILDER___#################################################

btn_dw = builder.get_object("btn_dw")
btn_dw.connect("clicked", on_btn_dw)

btn_wine_1 = builder.get_object("btn_staging")
btn_wine_1.connect("clicked", on_btn_wine_1)

btn_rm_staging = builder.get_object("btn_rm_staging")
btn_rm_staging.connect("clicked", on_btn_rm_staging)

btn_wine_2 = builder.get_object("btn_steam")
btn_wine_2.connect("clicked", on_btn_wine_2)

btn_rm_proton = builder.get_object("btn_rm_proton")
btn_rm_proton.connect("clicked", on_btn_rm_proton)

btn_wine_3 = builder.get_object("btn_ge")
btn_wine_3.connect("clicked", on_btn_wine_3)

btn_rm_ge = builder.get_object("btn_rm_ge")
btn_rm_ge.connect("clicked", on_btn_rm_ge)

btn_wine_4 = builder.get_object("btn_lutris")
btn_wine_4.connect("clicked", on_btn_wine_4)

btn_rm_lutris = builder.get_object("btn_rm_lutris")
btn_rm_lutris.connect("clicked", on_btn_rm_lutris)

btn_wine_5 = builder.get_object("btn_lutris_ge")
btn_wine_5.connect("clicked", on_btn_wine_5)

btn_rm_lutris_ge = builder.get_object("btn_rm_lutris_ge")
btn_rm_lutris_ge.connect("clicked", on_btn_rm_lutris_ge)

btn_wine_6 = builder.get_object("btn_custom")
btn_wine_6.connect("clicked", on_btn_wine_6)

#############################################___BUTTON_BACK_BUILDER___##################################################

btn_back_ab = builder.get_object("btn_back_ab")
btn_back_ab.connect("clicked", on_btn_back_ab)

btn_settings = builder.get_object("btn_settings")
btn_settings.connect("clicked", on_btn_settings)

btn_stop = builder.get_object("btn_stop")
btn_stop.connect("clicked", on_btn_stop)

btn_back_cs = builder.get_object("btn_back_cs")
btn_back_cs.connect("clicked", on_btn_back_cs)

btn_back_pt = builder.get_object("btn_back_pt")
btn_back_pt.connect("clicked", on_btn_back_pt)

btn_back_wt = builder.get_object("btn_back_wt")
btn_back_wt.connect("clicked", on_btn_back_wt)

btn_back_dw = builder.get_object("btn_back_dw")
btn_back_dw.connect("clicked", on_btn_back_dw)

btn_back_st = builder.get_object("btn_back_st")
btn_back_st.connect("clicked", on_btn_back_st)



###############################################___GET_FAVORITES___######################################################

top_header = builder.get_object("sw_top_header")
favorites_icon = builder.get_object("favorites_icon")
window.connect("configure-event", get_size)

def get_favorites():

    out_cmd = get_arg(get_out())

    try:
        favorites_path = open(f"{sw_favorites}" + out_cmd + '.desktop')

    except IOError as e:
        favorites_icon_path = f"{sw_icon}gui_icons/favorites-symbolic.svg"
        favorites_icon.set_from_file(favorites_icon_path)

    else:
        favorites_icon_path = f"{sw_icon}gui_icons/favorites.png"
        favorites_icon.set_from_file(favorites_icon_path)

get_favorites()

g_popover1 = builder.get_object("g_popover1")
btn_g_text_edit = builder.get_object("btn_g_text_edit")
btn_g_text_edit.connect("clicked", on_btn_g_text_edit)
btn_g1 = builder.get_object("btn_g1")
btn_g2 = builder.get_object("btn_g2")
btn_g3 = builder.get_object("btn_g3")
btn_g4 = builder.get_object("btn_g4")
btn_g5 = builder.get_object("btn_g5")
btn_g6 = builder.get_object("btn_g6")
btn_g7 = builder.get_object("btn_g7")
btn_g8 = builder.get_object("btn_g8")
btn_g9 = builder.get_object("btn_g9")
btn_g10 = builder.get_object("btn_g10")
btn_g11 = builder.get_object("btn_g11")
btn_g12 = builder.get_object("btn_g12")
btn_g13 = builder.get_object("btn_g13")
btn_g14 = builder.get_object("btn_g14")
btn_g15 = builder.get_object("btn_g15")
btn_g16 = builder.get_object("btn_g16")
btn_g17 = builder.get_object("btn_g17")
btn_g18 = builder.get_object("btn_g18")
btn_g19 = builder.get_object("btn_g19")
btn_g20 = builder.get_object("btn_g20")
btn_g21 = builder.get_object("btn_g21")
btn_g22 = builder.get_object("btn_g22")
btn_g23 = builder.get_object("btn_g23")
btn_g24 = builder.get_object("btn_g24")
btn_g25 = builder.get_object("btn_g25")
btn_g26 = builder.get_object("btn_g26")
btn_g27 = builder.get_object("btn_g27")
btn_g28 = builder.get_object("btn_g28")
btn_g29 = builder.get_object("btn_g29")
btn_g30 = builder.get_object("btn_g30")
btn_g31 = builder.get_object("btn_g31")
btn_g32 = builder.get_object("btn_g32")

game_name_flow()
########################################################################################################################

progressbar_lock = threading.Lock()
progress_lock_rl = threading.Lock()
progressbar = builder.get_object("start_progress")

################################################___GET_VTE___###########################################################

terminal = Vte.Terminal()
terminal.spawn_async(
    Vte.PtyFlags.DEFAULT,
    os.environ['HOME'],
    ['/bin/bash'],
    None,
    GLib.SpawnFlags.DEFAULT,
    None, None,
    -1,
    None,
    None,
    None,
)
spacer = Gtk.Label.new("               ")

terminal.set_scrollback_lines(2048)
term_font = Pango.FontDescription("Normal 10")
terminal.set_font(term_font)
terminal.set_clear_background(False)
terminal.set_hexpand(True)
terminal.set_vexpand(True)

terminal_sh = Vte.Terminal()
terminal_sh.spawn_async(
    Vte.PtyFlags.DEFAULT,
    os.environ['HOME'],
    ['/bin/bash'],
    None,
    GLib.SpawnFlags.DEFAULT,
    None, None,
    -1,
    None,
    None,
    None,
)

spacer = Gtk.Label.new("               ")

terminal_sh.set_scrollback_lines(2048)
term_font = Pango.FontDescription("Normal 10")
terminal_sh.set_font(term_font)
terminal_sh.set_clear_background(False)
terminal_sh.set_hexpand(True)
terminal_sh.set_vexpand(True)


menu = builder.get_object("menu_grid")
main_stack = builder.get_object("main_stack")

vte_main_box = builder.get_object("vte_main_box")
vte_main_grid = builder.get_object("vte_main_grid")
vte_main_grid.attach(terminal, 0, 0, 1, 1)
vte_main_grid.attach(terminal_sh, 0, 1, 1, 1)

vte_scrolled = builder.get_object("vte_scrolled")

btn_back_terminal = builder.get_object("btn_back_terminal")
btn_back_terminal.connect("clicked", on_btn_back_terminal)

sw_theme = f"sed -n '/023/p' {sw_scripts}/settings"
proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

if str(sw_theme_name) == str('023_white_theme'):

    terminal.set_clear_background(True)
    terminal_sh.set_clear_background(True)

########################################################################################################################

window.connect("destroy", Gtk.main_quit)
window.show_all()

Gtk.main()

