#!/usr/bin/env python3

##########################################___SCRIPTS_V353___############################################################

import os
import sys
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('Vte', '2.91')
from gi.repository import Gtk, GObject, Gdk, GdkPixbuf, Gio, GLib, Vte, Pango
from pathlib import Path
import subprocess
from subprocess import *
import threading
from threading import *
import traceback
import logging
import argparse
import urllib.request
import time
import io
import re

link = f"{sys.argv[0]}/"
path_link = Path(link).parent
sw_scripts = f"{path_link}/"
sw_path = Path(sw_scripts).parent.parent
sw_pfx = Path(sw_path) / 'data/pfx'
sw_shortcuts = Path(sw_path) / 'Shortcuts'
sw_icon = Path(sw_path) / 'data/img'
sw_games_config = Path(sw_path) / 'data/games_config'
sw_wine_custom = Path(sw_path) / 'data/wine/wine_custom'
sw_css_dark = f"{sw_icon}/sw_themes/css/dark/"
sw_css_light = f"{sw_icon}/sw_themes/css/light/"
fsh = Path(f"{sw_scripts}function.sh")
rsh = Path(f"{sw_scripts}run.sh")

pgrep = f"pgrep -a python3 | grep 'start '"
echo1 = f"echo env '\"'{sw_scripts}start'\"' '\"'`{pgrep} | sed -n '1p' | cut -d ' ' -f4-100`'\"'"
echo2 = f"echo env '\"'{sw_scripts}start'\"' '\"'`{pgrep} | sed -n '2p' | cut -d ' ' -f4-100`'\"'"

def preload_runlib():

    cmd = f"{sw_scripts}runlib"
    subprocess.call(cmd, shell=True)

preload_runlib()

def get_path_game():

    cmd_cut = f"cut -d ' ' -f3-100 {sw_scripts}run.sh"
    path_game = str(subprocess.run(cmd_cut, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '').replace('%F', '')
    return path_game

def get_arg(arg):

    return arg

get_arg(get_path_game())
path_game = get_arg(get_path_game())
exe_name = str(list(str(get_arg(get_path_game())).strip('"').split("/"))[-1].split(" ")[-1])
print(path_game)

def start_tray():

    get_arg(get_path_game())

    try:
        cmd = f"pgrep -a python3 | grep StartWine-Tray | cut -d ' ' -f1"
        proc = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
    except OSError as e:
        tray = f"{sw_scripts}StartWine-Tray {path_game}"
        subprocess.Popen(tray, shell=True, start_new_session=True)
    else:
        kill = f"kill -s KILL {proc}"
        subprocess.call(kill, shell=True)

        tray = f"{sw_scripts}StartWine-Tray {path_game}"
        subprocess.Popen(tray, shell=True, start_new_session=True)

start_tray()

def echo_run():

    cmd_echo1 = f"echo '\"'`{pgrep} | sed -n '1p' | cut -d ' ' -f4-100`'\"'"
    out1 = str(subprocess.run(cmd_echo1, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:])

    cmd_echo2 = f"echo '\"'`{pgrep} | sed -n '2p' | cut -d ' ' -f4-100`'\"'"
    out2 = str(subprocess.run(cmd_echo2, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:])

    if out2 == '""\n':
        cmd_echo_run1 = f"sed -i '1,100d' {sw_scripts}run.sh && {echo1} >> {sw_scripts}run.sh"
        subprocess.call(cmd_echo_run1, shell=True)
    else:
        cmd_echo_run2 = f"sed -i '1,100d' {sw_scripts}run.sh && {echo2} >> {sw_scripts}run.sh"
        subprocess.call(cmd_echo_run2, shell=True)

echo_run()

def get_out():

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')
    return out_cmd

pfx_name = f"pfx_" + get_arg(get_out()).replace('StartWine', 'default').replace('default_', 'default')
pfx_path = f"{sw_pfx}/{pfx_name}"
f_dll = Path(f"{pfx_path}/dll.log")
f_check = Path(f"{pfx_path}/check.log")
f_btn = Path(f"{pfx_path}/btn.log")

out_cmd = get_arg(get_out())
gc = Path(f"{sw_games_config}/" + str(out_cmd))
default = Path(f"{sw_games_config}/.default")

if not gc.exists():
    gc.write_text(default.read_text())
    gc.chmod(0o755)

##################################################___SW_MENU___#########################################################

def on_btn_back_terminal(self):

    cmd_exit = f"q \n clear\n"
    terminal.feed_child(cmd_exit.encode("UTF-8"))

    cmd_clear = f"clear\n"
    terminal.feed_child(cmd_clear.encode("UTF-8"))

    main_stack.set_visible_child_name("vte_main_box")

    Thread(target=run_htop).start()

    def ASCII():

        try:
            with open(f"/usr/bin/jp2a"):
                name_jpg = f"cd {sw_icon}/gui_icons && ls -1 | grep .jpg"
                proc = subprocess.run(name_jpg, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
                out_name = str(proc.stdout[0:]).replace('\n', '')
                open(f"{sw_icon}/gui_icons/{out_name}")
        except (IOError, OSError) as e:
            print("ASCII not found...")
        else:
            name_jpg = f"cd {sw_icon}/gui_icons && ls -1 | grep .jpg"
            proc = subprocess.run(name_jpg, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
            out_name = str(proc.stdout[0:]).replace('\n', '')
            print(out_name)
            cmd_ascii = f"clear && jp2a --colors {sw_icon}/gui_icons/{out_name} && cat {sw_icon}/gui_icons/ASCII_SW\n"
            terminal.feed_child(cmd_ascii.encode("UTF-8"))

    ASCII()

def run_htop():

    cmd_htop = f"htop -C -F .exe\n"
    terminal.feed_child(cmd_htop.encode("UTF-8"))

###############################################___RESIZE_XRANDR___######################################################

def on_btn_set_size(self):

    window.set_resizable(False)
    window.resize(320, 640)
    resize_btn_stack.set_visible_child_name("btn_get_size")

def get_size(widget, event):

    w = window.get_size().width
    h = window.get_size().height

    shortcut_scrolled.set_max_content_height(h*0.8)
    settings_scrolled.set_min_content_height(h*0.8)
    vkbasalt_scrolled.set_max_content_height(h*0.8)
    vte_scrolled.set_min_content_height(h*0.85)

    if w > 360:
        img_path = f"{sw_icon}/gui_icons/sw_top_header"
        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, w-360, 32, preserve_aspect_ratio=False)
        top_header.set_from_pixbuf(pixbuf)
    if w <= 320:
        window.set_resizable(False)
        window.resize(320, 640)
        resize_btn_stack.set_visible_child_name("btn_get_size")

def on_btn_get_size(self):

    screen = Gdk.Display.get_default()
#    monitor = screen.get_primary_monitor()
#    scale_factor = monitor.get_scale_factor()
    w = 0
    h = 0
    for x in range(0, screen.get_n_monitors()):
         w += screen.get_monitor(x).get_geometry().width
         if ( h < screen.get_monitor(x).get_geometry().height ):
              h = screen.get_monitor(x).get_geometry().height
    x = w
    # * scale_factor
    y = h
    # * scale_factor

    resize_btn_stack.set_visible_child_name("btn_set_size")

    if x <= 1600:
        window.set_resizable(True)
        win_resize = window.resize(x*0.85, y*0.85)

    if x > 1600 and x <= 1920:
        window.set_resizable(True)
        win_resize = window.resize(x*0.75, y*0.75)

    if x > 1920 and x <= 2560:
        window.set_resizable(True)
        win_resize = window.resize(x*0.70, y*0.70)

    if x > 2560:
        window.set_resizable(True)
        win_resize = window.resize(x*0.65, y*0.65)

    sc_flowbox.set_filter_func(shortcuts_filter, dict)

##############################################___ECHO_FUNCTON___########################################################

def echo_func_name(func_name):

    func = func_name
    path_game = get_arg(get_path_game())
    print(path_game)

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    g_log = f"{sw_path}/data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    if str(func) == str("ADD_SHORTCUT"):
        cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
        subprocess.call(cmd, shell=True)

    else:
        cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
        subprocess.Popen(cmd, shell=True, start_new_session=True, stderr=sys.stderr, encoding='UTF-8')

################################################___MENU_BUTTONS___######################################################

def on_btn_about(self):

    sw_stack.set_visible_child_name("about_window")

def on_btn_back_ab(self):

    sw_stack.set_visible_child_name("page0")

def on_btn_hide(self):

    window.close()

def on_btn_file_manager(self):

    cmd = f"xdg-open {sw_path}"
    subprocess.call(cmd, shell=True)
    popover.hide()
    g_popover1.hide()

def on_btn_text_edit(self):

    out_cmd = get_arg(get_out())
    text_edit_name = f"{sw_shortcuts}/" + str(out_cmd) + str(".desktop")

    try:
        with open(text_edit_name, 'r') as ten:
            xdg_open_cmd = f"xdg-open {text_edit_name}"
            subprocess.call(xdg_open_cmd, shell=True)
    except IOError as e:
        print("unable to open text editor, game shortcut not found, shortcut must be created")

    popover.hide()
    g_popover1.hide()

def on_btn_g_text_edit(self):

    on_btn_text_edit(self)

def on_btn_app_icon(self):

    func_name = f"ADD_SHORTCUT"
    echo_func_name(func_name)
    popover.hide()
    g_popover1.hide()

def on_btn_app_icon2(self):

    on_btn_app_icon(self)

def on_btn_protondb(self):

    out_cmd = get_arg(get_out())
    btn_protondb.set_uri("https://www.protondb.com/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_protondb2(self):

    out_cmd = get_arg(get_out())
    btn_protondb2.set_uri("https://www.protondb.com/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_winehq(self):

    out_cmd = get_arg(get_out())
    btn_winehq.set_uri("https://www.winehq.org/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_winehq2(self):

    out_cmd = get_arg(get_out())
    btn_winehq2.set_uri("https://www.winehq.org/search?q=" + str(out_cmd))

    popover.hide()
    g_popover1.hide()

def on_btn_lp_entry(self):

    out_cmd = get_arg(get_out())
    gc = Path(f"{sw_games_config}/" + str(out_cmd))

    try:
        gettext = lp_entry.get_text()
        file = gc.read_text().split('\n')
        text = file[2]
        refind = str(re.findall(r'\W*\w* \w*="', text))[2:-3]
        retext = str(text).replace(refind, '')
        gc.write_text(gc.read_text().replace(text, text.replace(retext, '"' + gettext + '"')))

    except IOError as e:
        print("game games_config not found, set default value")

def on_btn_games_config(self):

    out_cmd = get_arg(get_out())
    games_config_name = f"{sw_games_config}/" + str(out_cmd)

    try:
        with open(games_config_name, 'r') as gc_name:
            xdg_open_cmd = f"xdg-open {games_config_name}"
            subprocess.call(xdg_open_cmd, shell=True)

    except IOError as e:
        print("game games_config not found, set default value")

    popover.hide()
    g_popover1.hide()

#######################################################___START___######################################################

def progress():

    out_cmd = get_arg(get_out())
    name = out_cmd + f".exe"

    try:
        cmd = f"pgrep -fl .exe"
        pid = list(subprocess.run(cmd, shell=True, start_new_session=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())
        p1 = str(pid[-1])
        p2 = str(pid[-2])
        p3 = str(pid[-3])

        if p3 not in name and p2 not in name and p1 not in name:
            progressbar.pulse()
            return True
        else:
            print(name)
            GLib.timeout_add(200, set_text_done)
            GLib.timeout_add(1000, set_text_empty)
    except:
        print('oops!')

def set_text_done():

    progressbar.set_text('LOADED SUCCESSFULLY')

def set_text_empty():

    progressbar.set_show_text(False)
    progressbar.set_fraction(0.0)
    progressbar_lock.release()
    print("___done___")
    if main_stack.get_visible_child_name() != str('vte_main_box'):
        timeout = GLib.timeout_add(1000, Gtk.main_quit)

def on_btn_start(self):

    run_gamemode()

    ver = f"vulkaninfo | grep driverName | cut -d '=' -f2 | head -n1"
    ver2 = f"vulkaninfo | grep driverName | cut -d '=' -f2 | tail -n1"
    proc = subprocess.run(ver, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')
    proc = subprocess.run(ver2, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri2 = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')

    progressbar.set_show_text(True)
    progressbar.set_text('THE APP IS LOADING...')

    if str(vulkan_dri) == str('') and str(vulkan_dri2) == str(''):
        Thread(target=run_opengl).start()
        Thread(target=progress).start()
        if progressbar_lock.acquire(False):
            progress_timeout = GLib.timeout_add(60, progress)

    else:
        if str(vulkan_dri) == str('llvmpipe') and str(vulkan_dri2) == str('llvmpipe'):
            Thread(target=run_opengl).start()
            Thread(target=progress).start()
            if progressbar_lock.acquire(False):
                progress_timeout = GLib.timeout_add(60, progress)
        else:
            Thread(target=run_vulkan).start()
            Thread(target=progress).start()
            if progressbar_lock.acquire(False):
                GLib.timeout_add(60, progress)

def run_vulkan():

    g_log = f"{sw_path}/data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    func_name = f"RUN_VULKAN"
    echo_func_name(func_name)

def run_opengl():

    g_log = f"{sw_path}/data/tmp/log/{exe_name}.log"
    sys.stderr = open(g_log, 'w')

    func_name = f"USE_OPENGL='\"''1''\"' RUN_VULKAN"
    echo_func_name(func_name)

def run_gamemode():

    gmod_log = f"{sw_path}/data/tmp/log/gamemoded.log"
    sys.stderr = open(gmod_log, 'w')

    cmd_gmod = f"{sw_path}/data/tools/utils/bin/gamemoded"
    proc = subprocess.Popen(cmd_gmod, shell=True, start_new_session=True, stderr=subprocess.STDOUT, stdout=sys.stderr, encoding='UTF-8')

#################################################___SHORTCUTS___########################################################

def on_btn_shortcuts(self):

    on_btn_get_size(self)
    main_stack.set_visible_child_name("shortcut_main_box")
    sc_flowbox.set_filter_func(shortcuts_filter, dict)

def get_exe_icon():

    func = f"CREATE_ICON"
    path_game = get_arg(get_path_game())

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.Popen(cmd, shell=True, start_new_session=True, stderr=sys.stderr, encoding='UTF-8')

get_exe_icon()

def write_shortcut_path(shortcut_path):

    run_sh = Path(f"{sw_scripts}run.sh")
    s_path = shortcut_path.read_text().split('\n')[3].split('=')[1]
    run_sh.write_text(s_path)
    game_name()
    start_tray()
    return True

################___SHORTCUTS_FLOWBOX_EVENT___:

def shortcuts():

    paths = Path(f"{sw_shortcuts}")

    child_exe = get_arg(get_path_game())
    sc_name_exe = get_arg(get_out())
    path_exe = Path(f"{sw_shortcuts}/{sc_name_exe}.desktop")
    path_exe.touch()

    count = 0
    for child in paths.iterdir():
        count += 1
        def on_flow_btn_event(widget, event):
            w_name = widget.get_name()
            if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
                g_popover1.set_relative_to(widget)
                g_popover1.show_all()

            shortcut_path = Path(f"{w_name}")
            write_shortcut_path(shortcut_path)

            out_cmd = get_arg(get_out())
            gc = Path(f"{sw_games_config}/" + str(out_cmd))
            default = Path(f"{sw_games_config}/.default")

            if not gc.exists():
                gc.write_text(default.read_text())
                gc.chmod(0o755)

        sc_name = str(child.stem)
        fb_child = Gtk.FlowBoxChild()
        fb_child.set_name(f"{child}")
        fb_btn = Gtk.Button()
        fb_btn.set_name(f"{child}")
        fb_btn.set_relief(Gtk.ReliefStyle.NONE)
        fb_btn.connect('button-press-event', on_flow_btn_event)
        fb_label = Gtk.Label()
        fb_label.set_label(sc_name)
        fb_icon = Gtk.Image()
        fb_icon.set_from_file(f"{sw_icon}/{sc_name}_x96.png")
        fb_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        fb_box.pack_start(fb_icon, False, True, 0)
        fb_box.pack_start(fb_label, False, True, 0)
        fb_btn.add(fb_box)
        fb_child.add(fb_btn)
        sc_flowbox.insert(fb_child, position=count)
        sc_flowbox.show_all()

    try:
        types = path_exe.read_text().split('\n')[4]
    except IndexError as e:
        path_exe.unlink()

def shortcuts_filter(fb_child, dict):

    paths = Path(f"{sw_shortcuts}")
    child_exe = get_arg(get_path_game())
    sc_name_exe = get_arg(get_out())
    path_exe = Path(f"{sw_shortcuts}/{sc_name_exe}.desktop")
    dict = [str(child.stem) for child in paths.iterdir()]
    d = str(dict)
    c = str(Path(fb_child.get_name()).stem)

    for i in d:
        if c in d:
            return True
        if path_exe in paths.iterdir():
            return True
        else:
            return False

################################################___CREATE_SHORTCUT___###################################################

def on_btn_create_shortcut(self):

    sw_stack.set_visible_child_name("create_shortcut_window")

def echo_cs_name(wine_name):

    wine_ver = wine_name
    path_game = get_arg(get_path_game())

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd_set = f"echo export SET='\"''{wine_ver}''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.call(cmd_set, shell=True)

    cmd = f"echo CREATE_SHORTCUT '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.Popen(cmd, shell=True, start_new_session=True)

def on_btn_cs_staging(self):

    Thread(target=cs_staging).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_staging():

    wine_name = f"wine_staging"
    echo_cs_name(wine_name)

def on_btn_cs_steam(self):

    Thread(target=cs_steam).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_steam():

    wine_name = f"wine_steam_proton"
    echo_cs_name(wine_name)

def on_btn_cs_ge(self):

    Thread(target=cs_ge).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_ge():

    wine_name = f"wine_proton_ge"
    echo_cs_name(wine_name)

def on_btn_cs_lutris(self):

    Thread(target=cs_lutris).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_lutris():

    wine_name = f"wine_lutris"
    echo_cs_name(wine_name)

def on_btn_cs_lutris_ge(self):

    Thread(target=cs_lutris_ge).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

def cs_lutris_ge():

    wine_name = f"wine_lutris_ge"
    echo_cs_name(wine_name)

def on_btn_cs_custom(self):

    def name_cs_custom_1():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n1 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_1.set_label(label = str(out_name))

    name_cs_custom_1()

    def name_cs_custom_2():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n2 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_2.set_label(label = str(out_name))

    name_cs_custom_2()

    def name_cs_custom_3():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n3 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_3.set_label(label = str(out_name))

    name_cs_custom_3()

    def name_cs_custom_4():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n4 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_4.set_label(label = str(out_name))

    name_cs_custom_4()

    def name_cs_custom_5():

        cmd = f"cd {sw_wine_custom} && echo `ls -1 | tail -n5 | head -n1`"
        out_name = str(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout[0:]).replace('\n', '')
        btn_cs_custom_5.set_label(label = str(out_name))

    name_cs_custom_5()

def on_btn_cs_custom_1(self):

    Thread(target=cs_custom_1).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_1():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n1 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_2(self):

    Thread(target=cs_custom_2).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_2():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n2 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_3(self):

    Thread(target=cs_custom_3).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_3():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n3 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_4(self):

    Thread(target=cs_custom_4).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_4():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n4 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def on_btn_cs_custom_5(self):

    Thread(target=cs_custom_5).start()
    Thread(target=time.sleep(.5)).start()

    GLib.timeout_add(500, get_pid_name_CS)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_CS)
        GLib.timeout_add(1000, pid_name_print_CS)

    popover2.hide()

def cs_custom_5():

    cmd_ls = f"cd {sw_wine_custom} && echo `ls -1 | tail -n5 | head -n1`"
    proc = subprocess.run(cmd_ls, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    wine_name = str(proc.stdout[0:]).replace('\n', '')
    echo_cs_name(wine_name)

def progressbar_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_cs.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_cs.set_show_text(True)
            progressbar_cs.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_CS():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        return pid

    except (IndexError, OSError) as e:
        print('___process is done___')
        progressbar_cs.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        game_name()
        sc_flowbox.set_filter_func(shortcuts_filter, dict)
        sw_stack.set_visible_child_name("page0")
        progressbar_cs.set_text('')
        return False

def on_btn_back_cs(self):

    sw_stack.set_visible_child_name("page0")

######################################################___WINE_TOOLS___##################################################

def on_btn_winetools(self):

    sw_stack.set_visible_child_name("winetools_window")

def on_btn_winecfg(self):

    Thread(target=winecfg).start()

def winecfg():

    func_name = f"WINECFG"
    echo_func_name(func_name)

def on_btn_wineconsole(self):

    Thread(target=wineconsole).start()

def wineconsole():

    func_name = f"WINECONSOLE"
    echo_func_name(func_name)

def on_btn_regedit(self):

    Thread(target=regedit).start()

def regedit():

    func_name = f"REGEDIT"
    echo_func_name(func_name)

def on_btn_file_explorer(self):

    Thread(target=explorer).start()

def explorer():

    func_name = f"WINEFILE"
    echo_func_name(func_name)

def on_btn_uninstaller(self):

    Thread(target=uninstaller).start()

def uninstaller():

    func_name = f"UNINSTALLER"
    echo_func_name(func_name)

def on_btn_winetricks(self):

    pfx_name = f"pfx_" + get_arg(get_out()).replace('StartWine', 'default').replace('default_', 'default')
    pfx_path = f"{sw_pfx}/{pfx_name}"
    f_dll = Path(f"{pfx_path}/dll.log")
    f_check = Path(f"{pfx_path}/check.log")
    f_btn = Path(f"{pfx_path}/btn.log")

    window.set_resizable(True)
    sw_stack.set_visible_child_name("winetricks_window")
    window.resize(1280, 720)
    winetricks_scrolled.set_min_content_width(1280)
    winetricks_scrolled.set_min_content_height(500)
    window.set_resizable(False)
    pfx_label.set_label(pfx_path)

    def set_btn_active():

        with open(f_btn, 'r') as f:
            l = f.readlines()
            count = 0
            for line in l:
                count += 1
                btn_num = "{}".format(line.strip())
                btn_num = builder.get_object(btn_num)
                btn_num.set_active(True)
        try:
            f_check.unlink()
            f_dll.unlink()
        except IOError as e:
            print("check log not created, set to default")

    if f_dll.exists() and f_check.exists():
        if f_btn.exists():
            f_btn.write_text(f_btn.read_text() + f_check.read_text())
        else:
            f_btn.write_text(f_check.read_text())
        set_btn_active()
    else:
        if f_btn.exists():
            set_btn_active()

def key_event(widget, event):

    if event.keyval == Gdk.KEY_Return or event.keyval == Gdk.KEY_KP_Enter:
        gettext = se.get_text()
        count = -1
        for line in data_content:
            count +=1
            if gettext in line:
                b = builder.get_object(str(count))
                b.set_active(True)
                print(count)
                se.set_text("")

def get_selected(self, view, store):

    find = se.get_text()
    file = data_content

    found = [line for line in file if find in line]
    num = view.to_string()
    f_num = found[int(num)]
    se.set_text(f_num)

    gettext = se.get_text()
    count = -1
    for line in data_content:
        count +=1
        if gettext in line:
            b = builder.get_object(str(count))
            b.set_active(True)
            se.set_text("")

def search_changed(self):

    find = se.get_text()
    file = data_content

    if find == str(""):
        se_stack.set_visible_child_name("winetricks_notebook")
    else:
        se_stack.set_visible_child_name("se_view")

    found = [line for line in file if find in line]
    store.clear()
    count = 0
    for line in found:
        count +=1
        fline = "{}".format(line.strip())
        store.append([fline])

def on_btn_check_fonts(object):

    pfx_name = f"pfx_" + get_arg(get_out()).replace('StartWine', 'default').replace('default_', 'default')
    pfx_path = f"{sw_pfx}/{pfx_name}"
    f_dll = Path(f"{pfx_path}/dll.log")
    f_check = Path(f"{pfx_path}/check.log")

    font_num = Gtk.Buildable.get_name(object)
    buffer = fonts_view.get_buffer()
    startIter, endIter = buffer.get_bounds()
    bgt = buffer.get_text(startIter, endIter, False)
    font = str(bgt.split()[int(font_num.replace('_', ''))])
    btn_font = builder.get_object(font_num)

    if btn_font.get_active():
        with open(f_dll, 'a') as f:
            f.write(font + " ")
        with open(f_check, 'a') as f:
            f.write(font_num + "\n")
    else:
        f_dll.write_text(f_dll.read_text().replace(font + ' ', ''))
        f_check.write_text(f_check.read_text().replace(font_num + '\n', ''))

def on_btn_check_dll(object):

    pfx_name = f"pfx_" + get_arg(get_out()).replace('StartWine', 'default').replace('default_', 'default')
    pfx_path = f"{sw_pfx}/{pfx_name}"
    f_dll = Path(f"{pfx_path}/dll.log")
    f_check = Path(f"{pfx_path}/check.log")

    num = Gtk.Buildable.get_name(object)
    buffer = winetricks_text_view.get_buffer()
    startIter, endIter = buffer.get_bounds()
    bgt = buffer.get_text(startIter, endIter, False)
    dll = str(bgt.split()[int(num)])
    btn_dll = builder.get_object(num)

    if btn_dll.get_active():
        with open(f_dll, 'a') as f:
            f.write(dll + " ")
        with open(f_check, 'a') as f:
            f.write(num + "\n")
    else:
        f_dll.write_text(f_dll.read_text().replace(dll + ' ', ''))
        f_check.write_text(f_check.read_text().replace(num + '\n', ''))

def on_btn_install_dll(self):

    Thread(target=install_dll).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_DLL).start()

    GLib.timeout_add(500, get_pid_name_DLL)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_DLL)
        GLib.timeout_add(1000, pid_name_print_DLL)

def install_dll():

    pfx_name = f"pfx_" + get_arg(get_out()).replace('StartWine', 'default').replace('default_', 'default')
    pfx_path = f"{sw_pfx}/{pfx_name}"
    f_dll = Path(f"{pfx_path}/dll.log")

    with open(f_dll, 'r') as f:

        path_game = get_arg(get_path_game())
        dll_name = f.read()
        func_name = f"SW_WINETRICKS"

        cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
        subprocess.call(cmd_clear, shell=True)

        cmd_dll = f"echo export DLL='\"''{dll_name}''\"' >> {sw_scripts}function.sh"
        subprocess.call(cmd_dll, shell=True)

        cmd = f"echo {func_name} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
        subprocess.call(cmd, shell=True)

def on_btn_back_winetricks(self):

    window.set_resizable(True)
    window.resize(320, 640)
    sw_stack.set_visible_child_name("winetools_window")
    winetricks_scrolled.set_min_content_width(-1)
    winetricks_scrolled.set_min_content_height(-1)
    pfx_label.set_label("")
    window.set_resizable(False)

def on_btn_install_rl(self):

    Thread(target=install_rl).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_WT).start()

    GLib.timeout_add(500, get_pid_name_WT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_WT)
        GLib.timeout_add(1000, pid_name_print_WT)

def install_rl():

    func_name = f"INSTALL_RL"
    echo_func_name(func_name)

def progressbar_DLL():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_dll.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_DLL():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_dll.set_show_text(True)
            progressbar_dll.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_DLL():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])
        return pid

    except (IndexError, OSError) as e:
        progressbar_dll.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        progressbar_dll.set_text('')
        return False

def progressbar_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_wt.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_wt.set_show_text(True)
            progressbar_wt.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_WT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])
        return pid

    except (IndexError, OSError) as e:
        progressbar_wt.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        progressbar_wt.set_text('')
        return False

def on_btn_back_wt(self):

    sw_stack.set_visible_child_name("page0")

###############################################___PREFIX_TOOLS___#######################################################

def on_btn_prefix_tools(self):

    sw_stack.set_visible_child_name("prefix_tools_window")

def on_btn_remove_prefix(self):

    Thread(target=remove_prefix).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)

def remove_prefix():

    func_name = f"REMOVE_PFX"
    echo_func_name(func_name)

def on_btn_reinstall_prefix(self):

    Thread(target=reinstall_prefix).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(1000, pid_name_print_PT)

def reinstall_prefix():

    func_name = f"REINSTALL_PFX"
    echo_func_name(func_name)

def on_btn_pfx_backup(self):

    Thread(target=pfx_backup).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_backup():

    func_name = f"SW_PFX_BACKUP"
    echo_func_name(func_name)

def on_btn_pfx_restore(self):

    Thread(target=pfx_restore).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_restore():

    func_name = f"SW_PFX_RESTORE"
    echo_func_name(func_name)

def on_btn_pfx_full_backup(self):

    Thread(target=pfx_full_backup).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_full_backup():

    func_name = f"SW_PFX_FULL_BACKUP"
    echo_func_name(func_name)

def on_btn_pfx_full_restore(self):

    Thread(target=pfx_full_restore).start()
    Thread(target=time.sleep(.5)).start()
    Thread(target=progressbar_PT).start()

    GLib.timeout_add(500, get_pid_name_PT)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_PT)
        GLib.timeout_add(2000, pid_iso)

def pfx_full_restore():

    func_name = f"SW_PFX_FULL_RESTORE"
    echo_func_name(func_name)

def progressbar_PT():

    try:

        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_pt.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_PT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_pt.set_show_text(True)
            progressbar_pt.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_iso():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            progressbar_pt.set_show_text(True)
            progressbar_pt.set_text('squashfs...')

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_PT():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        return pid

    except (IndexError, OSError) as e:
        print('___process is done___')
        progressbar_pt.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        game_name()
        sc_flowbox.set_filter_func(shortcuts_filter, dict)
        progressbar_pt.set_text('')
        return False

def on_btn_back_pt(self):

    sw_stack.set_visible_child_name("page0")

###################################################___DEBUG___##########################################################

def on_btn_debug(self):

    ver = f"vulkaninfo | grep driverName | cut -d '=' -f2 | head -n1"
    ver2 = f"vulkaninfo | grep driverName | cut -d '=' -f2 | tail -n1"
    proc = subprocess.run(ver, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')
    proc = subprocess.run(ver2, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, encoding='UTF-8')
    vulkan_dri2 = str(proc.stdout[0:]).replace('\n', '').replace(' ', '')

    if str(vulkan_dri) == str('') and str(vulkan_dri2) == str(''):

        Thread(target=debug_opengl).start()

    else:
        if str(vulkan_dri) == str('llvmpipe') and str(vulkan_dri2) == str('llvmpipe'):

            Thread(target=debug_opengl).start()

        else:
            Thread(target=debug_vulkan).start()

def debug_vulkan():

    func_name = f"DEBUG_VULKAN"
    echo_func_name(func_name)

def debug_opengl():

    func_name = f"USE_OPENGL='\"''1''\"' DEBUG_VULKAN"
    echo_func_name(func_name)

#################################################___DOWNLOAD_WINE___####################################################

def on_btn_dw(self):

    sw_stack.set_visible_child_name("download_wine_window")

def echo_wine(wine_name):

    wine_num = wine_name

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd = f"echo {wine_num} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh"
    subprocess.call(cmd, shell=True)

def on_btn_wine_1(self):

    wine_name = f"WINE_1"
    echo_wine(wine_name)

def on_btn_rm_staging(self):

    wine_name = f"RM_WINE_1"
    echo_wine(wine_name)

def on_btn_wine_2(self):

    wine_name = f"WINE_2"
    echo_wine(wine_name)

def on_btn_rm_proton(self):

    wine_name = f"RM_WINE_2"
    echo_wine(wine_name)

def on_btn_wine_3(self):

    wine_name = f"WINE_3"
    echo_wine(wine_name)

def on_btn_rm_ge(self):

    wine_name = f"RM_WINE_3"
    echo_wine(wine_name)

def on_btn_wine_4(self):

    wine_name = f"WINE_4"
    echo_wine(wine_name)

def on_btn_rm_lutris(self):

    wine_name = f"RM_WINE_4"
    echo_wine(wine_name)

def on_btn_wine_5(self):

    wine_name = f"WINE_5"
    echo_wine(wine_name)

def on_btn_rm_lutris_ge(self):

    wine_name = f"RM_WINE_5"
    echo_wine(wine_name)

def on_btn_wine_6(self):

    cmd = f"xdg-open {sw_path}/data/wine/wine_custom"
    subprocess.Popen(cmd, shell=True)

def on_btn_back_dw(self):

    sw_stack.set_visible_child_name("page0")

##############################################___INSTALL_LAUNCHERS___###################################################

def on_btn_inst_launchers(self):

    on_btn_get_size(self)
    main_stack.set_visible_child_name("install_launchers")
    sc_flowbox.set_filter_func(launchers_filter, dict)

def inst_launchers(func):

    Thread(target=echo_func_launchers(func)).start()
    Thread(target=time.sleep(0.5)).start()
    Thread(target=progressbar_install).start()
    GLib.timeout_add(500, get_pid_name_inst)

    if progressbar_lock.acquire(False):
        GLib.timeout_add(60, progressbar_install)
        GLib.timeout_add(1000, pid_name_print_inst)

def echo_func_launchers(func):

    path_game = get_arg(get_path_game())

    cmd_clear = f"sed -i '3,100d' {sw_scripts}function.sh"
    subprocess.call(cmd_clear, shell=True)

    cmd = f"echo {func} '\"''$@''\"' >> {sw_scripts}function.sh && {sw_scripts}function.sh {path_game}"
    subprocess.Popen(cmd, shell=True, start_new_session=True, encoding='UTF-8')

def launchers():

    paths = Path(f"{sw_icon}/launcher_icons")

    count = 0
    for child in paths.iterdir():
        count += 1

        def on_flow_btn_event(widget, event):
            w_name = widget.get_name()
            l_name = Path(w_name).stem

            if l_name == str('Battle.net'):

                func = f"INSTALL_BATTLE_NET"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('EpicGames'):

                func = f"INSTALL_EPIC"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('EVE_Online'):

                func = f"INSTALL_EVE"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('GalaxyClient'):

                func = f"INSTALL_GOG"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('GameCenter'):

                func = f"INSTALL_MYGAMES"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Origin'):

                func = f"INSTALL_ORIGIN"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('RiotClient'):

                func = f"INSTALL_LOL"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('RockstarGames'):

                func = f"INSTALL_ROCKSTAR"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Steam'):

                func = f"INSTALL_STEAM"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Ubisoft'):

                func = f"INSTALL_UBISOF"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('WGC'):

                func = f"INSTALL_WGC"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Zona'):

                func = f"INSTALL_ZONA"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('BethesdaNet'):

                func = f"INSTALL_BETHESDANET"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('OSU'):

                func = f"INSTALL_OSU"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Ankama'):

                func = f"INSTALL_ANKAMA"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('gfclient'):

                func = f"INSTALL_GAMEFORGE"
                launcher_label.set_label(func)
                inst_launchers(func)

            if l_name == str('Itch'):

                func = f"INSTALL_ITCH"
                launcher_label.set_label(func)
                inst_launchers(func)

        sc_name = str(child.stem)
        inst_child = Gtk.FlowBoxChild()
        inst_child.set_name(f"{child}")
        inst_btn = Gtk.Button()
        inst_btn.set_name(f"{child}")
        inst_btn.set_relief(Gtk.ReliefStyle.NONE)
        inst_btn.connect('button-press-event', on_flow_btn_event)
        inst_label = Gtk.Label()
        inst_label.set_label(sc_name)
        inst_icon = Gtk.Image()
        inst_icon.set_from_file(f"{sw_icon}/launcher_icons/{sc_name}.png")
        inst_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        inst_box.pack_start(inst_icon, False, True, 0)
        inst_box.pack_start(inst_label, False, True, 0)
        inst_btn.add(inst_box)
        inst_child.add(inst_btn)
        inst_flowbox.insert(inst_child, position=count)
        inst_flowbox.show_all()

def launchers_filter(inst_child, dict):

    paths = Path(f"{sw_icon}/launcher_icons")
    dict = [str(child.stem) for child in paths.iterdir()]
    d = str(dict)
    c = str(Path(inst_child.get_name()).stem)

    for i in d:
        if c in d:
            return True
        else:
            return False

def progressbar_install():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):
            progressbar_inst.pulse()
            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def pid_name_print_inst():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])

        if str(pid) == str('function.sh'):

            cmd_print = f"pgrep -fl .exe"
            pid_print = str(list(subprocess.run(cmd_print, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-3])

            progressbar_inst.set_show_text(True)
            progressbar_inst.set_text(pid_print)

            return True

    except (IndexError, OSError) as e:
        print('|___all process is done___|')

def get_pid_name_inst():

    try:
        cmd = f"pgrep -l function.sh"
        pid = str(list(subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8').stdout.split())[-1])
        return pid

    except (IndexError, OSError) as e:
        progressbar_inst.set_fraction(0.0)
        progressbar_lock.release()
        Thread(target=time.sleep(1)).start()
        progressbar_inst.set_text('')
        launcher_label.set_label('')

        window.close()
        path_game = get_arg(get_path_game())
        cmd = f"{sw_scripts}start {path_game}"
        subprocess.Popen(cmd, shell=True)

        return False

###################################################___SETTINGS___#######################################################

def on_btn_settings(self):

    on_btn_get_size(self)
    main_stack.set_visible_child_name("app_settings_main_box")
    app_conf_activate()

def app_conf_activate():

    out_cmd = get_arg(get_out())
    gc = Path(f"{sw_games_config}/" + str(out_cmd))
    default = Path(f"{sw_games_config}/.default")

    startIter, endIter = vk_buffer.get_bounds()
    vk_data = vk_buffer.get_text(startIter, endIter, False).split('\n')

#########################___vkbasalt_check___:

    for i in range(0,72):
        data = vk_data[i]
        vk_check = builder.get_object(str('vk') + str(i))
        vk_check.set_name(data)
        vk_name = vk_check.get_name()
        vk_check.set_label(data)
        label = vk_check.get_label()
        gcread = gc.read_text().split('\n')
        l = str(':' + label + ':')
        vk_check.set_active(False)
        for x in gcread:
            if l in x:
                vk_check.set_active(True)

#####################################___hud_position___:

    file = gc.read_text().split('\n')
    reline = f"export SW_HUD_POSITION="
    for line in file:
        if reline in line:
            position = str(line).replace(reline, '')
    if position == str('"R"'):
        hud_posL.set_active(False)
        hud_posR.set_active(True)
    else:
        hud_posL.set_active(True)
        hud_posR.set_active(False)

#####################################___btn_check___:

    file = gc.read_text().split('\n')
    count = -1
    for c in file:
        count += 1
        btn_check = builder.get_object(str('c') + str(count))

        if btn_check is not None:
            file = gc.read_text().split('\n')
            export = file[int(count) + 2]
            reexport = re.findall(r'\Wexport', export)

            if str(reexport) == str(['#export']):
                btn_check.set_active(False)
            else:
                btn_check.set_active(True)

#####################################___entry___:

    file = gc.read_text().split('\n')
    count = -1
    for e in file:
        count += 1
        entry = builder.get_object(str('e') + str(count))
        if entry is not None:
            file = gc.read_text().split('\n')
            text = file[int(count) + 2]
            retext = str(re.findall(r'\w* \w*="', text))[2:-3]
            t = str(text).replace(retext, '')[1:-1]

            if str(retext) != str(''):
                entry.set_text(t)
            else:
                entry.set_text('')

#####################################___btn_switch___:

    file = gc.read_text().split('\n')
    count = -1
    for s in file:
        count += 1
        btn_switch = builder.get_object(str('s') + str(count))
        if btn_switch is not None:
            file = gc.read_text().split('\n')
            config = file[int(count) + 2]
            reconfig = re.findall(r'=\w+', config)

            if str(reconfig) == str(['=1']):
                btn_switch.set_active(True)
            else:
                btn_switch.set_active(False)

#####################################___fps_scale___:

    file = gc.read_text().split('\n')
    reline = f"export SW_FPS_LIMIT="
    for line in file:
        if reline in line:
            fps_value = str(line).replace(reline, '').replace('#', '')
            fps_scale.set_value(float(fps_value[1:-1]))
            fps_depth = str(line).replace(fps_value, '').replace(reline, '')
            if fps_depth == str('#'):
                btn_fps.set_active(False)
            else:
                btn_fps.set_active(True)

#####################################___effect_scale___:

    file = gc.read_text().split('\n')
    reline = str('export VKBASALT_CAS=')
    for line in file:
        if reline in line:
            effect_value = str(line).replace(reline, '').replace('#', '')
            effect_scale.set_value(float(effect_value[1:-1])*100)
            depth = str(line).replace(effect_value, '').replace(reline, '')
            if depth == str('#'):
                btn_depth.set_active(False)
            else:
                btn_depth.set_active(True)

def on_btn_check_conf(object):

    def on_switch_activated(btn_switch, gparam):

        if btn_switch.get_active():
            file = gc.read_text().split('\n')
            config = file[int(check_num) + 2]
            gc.write_text(gc.read_text().replace(config, config.replace('=0', '=1')))
        else:
            file = gc.read_text().split('\n')
            config = file[int(check_num) + 2]
            gc.write_text(gc.read_text().replace(config, config.replace('=1', '=0')))

    def on_btn_ok(self):

        gettext = entry.get_text()
        file = gc.read_text().split('\n')
        text = file[int(entry_num) + 2]
        refind = str(re.findall(r'\w* \w*="', text))[2:-3]
        retext = str(text).replace(refind, '')
        gc.write_text(gc.read_text().replace(text, text.replace(retext, '"' + gettext + '"')))

    def on_hud_activated(self):

        if hud_posR.get_active():
            hud_posL.set_active(False)

            file = gc.read_text().split('\n')
            reline = f"export SW_HUD_POSITION="
            for line in file:
                if reline in line:
                    position = str(line).replace(reline, '')
                    gc.write_text(gc.read_text().replace(position, position.replace(str('"L"'), str('"R"'))))
        else:
            hud_posL.set_active(True)
            file = gc.read_text().split('\n')
            reline = f"export SW_HUD_POSITION="
            for line in file:
                if reline in line:
                    position = str(line).replace(reline, '')
                    gc.write_text(gc.read_text().replace(position, position.replace(str('"R"'), str('"L"'))))

    out_cmd = get_arg(get_out())
    gc = Path(f"{sw_games_config}/" + str(out_cmd))
    file = gc.read_text().split('\n')

    btn_check_name = Gtk.Buildable.get_name(object)
    check_num = btn_check_name.replace('c', '')
    btn_check = builder.get_object(btn_check_name)

    btn_switch_name = btn_check_name.replace('c', 's')
    switch_num = btn_check_name.replace('c', '')
    btn_switch = builder.get_object(btn_switch_name)

    btn_ok_name = btn_check_name.replace('c', 'b')
    ok_num = btn_check_name.replace('c', '')
    btn_ok = builder.get_object(btn_ok_name)

    entry_name = btn_check_name.replace('c', 'e')
    entry_num = btn_check_name.replace('c', '')
    entry = builder.get_object(entry_name)

    hud_posR = builder.get_object('btn_R')
    hud_posL = builder.get_object('btn_L')
    hud_posR.connect("toggled", on_hud_activated)
    hud_posL.connect("toggled", on_hud_activated)

    if btn_check.get_active():
        try:
            file = gc.read_text().split('\n')
            export = file[int(check_num) + 2]
            gc.write_text(gc.read_text().replace(export, export.replace('#export', 'export')))

            if btn_ok is not None:
                btn_ok.set_sensitive(True)
                btn_ok.connect('clicked', on_btn_ok)

            if btn_switch is not None:
                btn_switch.set_sensitive(True)
                btn_switch.connect("notify::active", on_switch_activated)

        except IOError as e:
            print("games_config not found, set default value")
    else:
        try:
            file = gc.read_text().split('\n')
            export = file[int(check_num) + 2]
            gc.write_text(gc.read_text().replace(export, export.replace('export', '#export')))

            if btn_ok is not None:
                btn_ok.set_sensitive(False)

            if btn_switch is not None:
                btn_switch.set_sensitive(False)

        except IOError as e:
            print("games_config not found, set default value")

def on_vk_check_conf(object):

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')

    startIter, endIter = vk_buffer.get_bounds()
    vk_data = vk_buffer.get_text(startIter, endIter, False).split('\n')
    vk_num = str(Gtk.Buildable.get_name(object)).replace('vk', '')
    vk_check = builder.get_object(Gtk.Buildable.get_name(object))
    gc = Path(f"{sw_games_config}/" + str(out_cmd))

    if vk_check.get_active():
        gcread = gc.read_text().split('\n')
        vkd = vk_data[int(vk_num)]
        l = str(':' + vkd + ':')
        for x in gcread:
            if l in x:
                gc.write_text(gc.read_text().replace(':' + vkd + ':', ':'))
        gc.write_text(gc.read_text().replace('cas:', 'cas:' + vkd + ':'))
    else:
        vkd = vk_data[int(vk_num)]
        gc.write_text(gc.read_text().replace(':' + vkd + ':', ':'))

def on_btn_app_conf_default(self):

    out_cmd = get_arg(get_out())
    gc = Path(f"{sw_games_config}/" + str(out_cmd))
    gc_default = Path(f"{sw_games_config}/.default")

    try:
        gc.write_text(gc_default.read_text())
        app_conf_activate()
    except IOError as e:
        print("application config not found, set default value")
    else:
        gc.write_text(gc_default.read_text())
        app_conf_activate()

def on_btn_launch_conf(self):

    settings_stack.set_visible_child_name("settings_scrolled")

def on_btn_vkbasalt_conf(self):

    settings_stack.set_visible_child_name("vkbasalt_scrolled")

def on_btn_depth(object):

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')
    gc = Path(f"{sw_games_config}/" + str(out_cmd))

    if btn_depth.get_active():
        gc.write_text(gc.read_text().replace('#export VKBASALT_CAS=', 'export VKBASALT_CAS='))
    else:
        gc.write_text(gc.read_text().replace('export VKBASALT_CAS=', '#export VKBASALT_CAS='))

def on_effect_scale(effect_scale):

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')
    gc = Path(f"{sw_games_config}/" + str(out_cmd))
    file = gc.read_text().split('\n')

    get_depth = str(effect_scale.get_value()/100)
    value = str('export VKBASALT_CAS=')

    for i in file:
        if value in i:
            revalue = i.replace(value, '').replace('#', '')
            gc.write_text(gc.read_text().replace(revalue, '"' + get_depth + '"'))

def on_btn_fps(object):

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')
    gc = Path(f"{sw_games_config}/" + str(out_cmd))

    if btn_fps.get_active():
        gc.write_text(gc.read_text().replace('#export SW_FPS_LIMIT=', 'export SW_FPS_LIMIT='))
    else:
        gc.write_text(gc.read_text().replace('export SW_FPS_LIMIT=', '#export SW_FPS_LIMIT='))

def on_fps_scale(fps_scale):

    cmd = f"sed 's/\//\\n/g' {sw_scripts}run.sh | sed 's/\"//g' | sed 's/\.exe//gi' | tail -n1"
    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
    out_cmd = str(proc.stdout[0:]).replace('\n', '').replace('start', 'StartWine').replace(' %F', '').replace(' ', '_')
    gc = Path(f"{sw_games_config}/" + str(out_cmd))
    file = gc.read_text().split('\n')

    get_depth = str(fps_scale.get_value())
    value = str('export SW_FPS_LIMIT=')

    for i in file:
        if value in i:
            revalue = i.replace(value, '').replace('#', '')
            gc.write_text(gc.read_text().replace(revalue, '"' + get_depth + '"'))

###############################################___KILL_PROCESS___#######################################################

def on_btn_stop(self):

    cmd = f"{sw_scripts}stop"
    subprocess.call(cmd, shell=True)

############################################___BUILDER_GET_SW_WINDOW___#################################################

builder = Gtk.Builder()
builder.add_from_file(f"{sw_scripts}sw_menu.glade")

window = builder.get_object("StartWine")

sw_stack = builder.get_object("sw_stack")
sw_stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)

############################################___BUILDER_SW_BUTTONS___####################################################

resize_btn_stack = builder.get_object("resize_btn_stack")

btn_get_size = builder.get_object("btn_get_size")
btn_get_size.connect("clicked", on_btn_get_size)

btn_set_size = builder.get_object("btn_set_size")
btn_set_size.connect("clicked", on_btn_set_size)

btn_about = builder.get_object("btn_about")
btn_about.connect("clicked", on_btn_about)

about = builder.get_object("about_window")

btn_hide = builder.get_object("btn_hide")
btn_hide.connect("clicked", on_btn_hide)

######################################___BUILDER_POPOVER___:

popover = builder.get_object("popover")
popover2 = builder.get_object("popover2")
g_popover1 = builder.get_object("g_popover1")

btn_file_manager = builder.get_object("btn_file_manager")
btn_file_manager.connect("clicked", on_btn_file_manager)

btn_file_manager2 = builder.get_object("btn_file_manager2")
btn_file_manager2.connect("clicked", on_btn_file_manager)

btn_text_edit = builder.get_object("btn_text_edit")
btn_text_edit.connect("clicked", on_btn_text_edit)

btn_g_text_edit = builder.get_object("btn_g_text_edit")
btn_g_text_edit.connect("clicked", on_btn_g_text_edit)

btn_app_icon = builder.get_object("btn_app_icon")
btn_app_icon.connect("clicked", on_btn_app_icon)

btn_app_icon2 = builder.get_object("btn_app_icon2")
btn_app_icon2.connect("clicked", on_btn_app_icon)

btn_games_config = builder.get_object("btn_games_config")
btn_games_config.connect("clicked", on_btn_games_config)

btn_protondb = builder.get_object("btn_protondb")
btn_protondb.connect("activate-link", on_btn_protondb)

btn_protondb2 = builder.get_object("btn_protondb2")
btn_protondb2.connect("activate-link", on_btn_protondb2)

btn_winehq = builder.get_object("btn_winehq")
btn_winehq.connect("activate-link", on_btn_winehq)

btn_winehq2 = builder.get_object("btn_winehq2")
btn_winehq2.connect("activate-link", on_btn_winehq2)

########################################___BUILDER_ENTRY___:

lp_entry = builder.get_object("lp_entry")
lp_entry.set_activates_default(True)
lp_entry.connect("activate", on_btn_lp_entry)

lp_icon = f"{sw_icon}/gui_icons/regedit.svg"
lp_pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(lp_icon, 16, 16, preserve_aspect_ratio=True)

lp_entry.set_icon_activatable(0, True)
lp_entry.set_icon_sensitive(0, True)

btn_lp_entry = builder.get_object("btn_lp_entry")
btn_lp_entry.connect("clicked", on_btn_lp_entry)

########################################___BACKGROUND_COLOR_GET_RESOLUTION___###########################################

def get_resolution():

    screen = Gdk.Display.get_default()
#    monitor = screen.get_primary_monitor()
#    scale_factor = monitor.get_scale_factor()
    w = 0
    h = 0
    for x in range(0, screen.get_n_monitors()):
         w += screen.get_monitor(x).get_geometry().width
         if ( h < screen.get_monitor(x).get_geometry().height ):
              h = screen.get_monitor(x).get_geometry().height
    out_name_1 = w
    # * scale_factor
    out_name_2 = h
    # * scale_factor
    print (f"{out_name_1}*{out_name_2}")

    def get_css(css_name):

        css = css_name

        screen = Gdk.Screen.get_default()
        provider = Gtk.CssProvider()
        style_context = Gtk.StyleContext()
        style_context.add_provider_for_screen(
            screen, provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )
        provider.load_from_path(css)

    def on_btn_black_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_black_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=black_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=black_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def black_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=black_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=black_theme'):

            css_name = f"{sw_css_dark}black/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg1"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("black_theme_ACTIVE")
        else:
            print("black_theme_OFF")

    black_theme()

    def on_btn_gray_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_gray_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=gray_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=gray_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def gray_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=gray_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=gray_theme'):

            css_name = f"{sw_css_dark}grey/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg2"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("gray_theme_ACTIVE")
        else:
            print("gray_theme_OFF")

    gray_theme()

    def on_btn_red_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_red_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=red_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=red_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def red_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=red_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=red_theme'):

            css_name = f"{sw_css_dark}red/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg3"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("red_theme_ACTIVE")
        else:
            print("red_theme_OFF")

    red_theme()

    def on_btn_yellow_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_yellow_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=yellow_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=yellow_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def yellow_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=yellow_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=yellow_theme'):

            css_name = f"{sw_css_dark}yellow/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg4"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("yellow_theme_ACTIVE")
        else:
            print("yellow_theme_OFF")

    yellow_theme()

    def on_btn_green_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_green_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=green_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=green_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def green_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=green_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=green_theme'):

            css_name = f"{sw_css_dark}green/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg5"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("green_theme_ACTIVE")
        else:
            print("green_theme_OFF")

    green_theme()

    def on_btn_blue_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_blue_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=blue_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=blue_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def blue_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=blue_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=blue_theme'):

            css_name = f"{sw_css_dark}blue/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg6"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("blue_theme_ACTIVE")
        else:
            print("blue_theme_OFF")

    blue_theme()

    def on_btn_purple_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_purple_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=purple_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=purple_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def purple_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=purple_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=purple_theme'):

            css_name = f"{sw_css_dark}purple/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg7"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("purple_theme_ACTIVE")
        else:
            print("purple_theme_OFF")

    purple_theme()

    def on_btn_mix_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_mix_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=mix_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=mix_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def mix_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=mix_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=mix_theme'):

            css_name = f"{sw_css_dark}brown/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg8"
            image = builder.get_object("sw_bgr")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("mix_theme_ACTIVE")
        else:
            print("mix_theme_OFF")

    mix_theme()

    def on_btn_white_theme(self):

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        if btn_white_theme.get_active():

            state = "on"
            command = f"sed -i '38 s/.*/SW_THEME=white_theme/' {gc}"
            subprocess.call(command, shell=True)

            window.close()
            path_game = get_arg(get_path_game())
            cmd = f"{sw_scripts}start {path_game}"
            subprocess.Popen(cmd, shell=True)

        else:
            state = "off"
            command = f"sed -i '/SW_THEME=white_theme/g' {gc}"
            subprocess.call(command, shell=True)

    def white_theme():

        out_cmd = get_arg(get_out())
        gc = Path(f"{sw_games_config}/" + str(out_cmd))

        sw_theme = f"sed -n '/SW_THEME=white_theme/p' {gc}"
        proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
        sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

        if str(sw_theme_name) == str('SW_THEME=white_theme'):

            css_name = f"{sw_css_light}black/gtk-3.0/gtk.css"
            get_css(css_name)

            img_path = f"{sw_icon}/sw_themes/4k/sw_bg0"
            image = builder.get_object("sw_bgrw")
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(img_path, int(out_name_1), int(out_name_2), preserve_aspect_ratio=False)
            image.set_from_pixbuf(pixbuf)
            print("white_theme_ACTIVE")
        else:
            print("white_theme_OFF")

    white_theme()

    btn_black_theme = builder.get_object("btn_black_theme")
    btn_black_theme.connect("toggled", on_btn_black_theme)

    btn_gray_theme = builder.get_object("btn_gray_theme")
    btn_gray_theme.connect("toggled", on_btn_gray_theme)

    btn_red_theme = builder.get_object("btn_red_theme")
    btn_red_theme.connect("toggled", on_btn_red_theme)

    btn_yellow_theme = builder.get_object("btn_yellow_theme")
    btn_yellow_theme.connect("toggled", on_btn_yellow_theme)

    btn_green_theme = builder.get_object("btn_green_theme")
    btn_green_theme.connect("toggled", on_btn_green_theme)

    btn_blue_theme = builder.get_object("btn_blue_theme")
    btn_blue_theme.connect("toggled", on_btn_blue_theme)

    btn_purple_theme = builder.get_object("btn_purple_theme")
    btn_purple_theme.connect("toggled", on_btn_purple_theme)

    btn_mix_theme = builder.get_object("btn_mix_theme")
    btn_mix_theme.connect("toggled", on_btn_mix_theme)

    btn_white_theme = builder.get_object("btn_white_theme")
    btn_white_theme.connect("toggled", on_btn_white_theme)

get_resolution()

###############################################___START_MODE_PARSE___###################################################

def game_name():

    app_name = get_arg(get_out())
    print(app_name)

    def desktop_wine():

        desktop_name = Path(f"{sw_shortcuts}/" + str(app_name) + '.desktop')
        desktop_sw = Path(f"{sw_path}/" + 'StartWine.desktop')

        try:
            data = desktop_name.read_text().split('\n')
            reline = str('SW_USE=')
            for line in data:
                if reline in line:
                    ls_wine = line.replace(reline, '').replace('wine_', 'WINE:\n')
                    print(ls_wine)
        except IOError as e:
            print("game desktop not found, set default value")
            data = desktop_sw.read_text().split('\n')
            reline = str('SW_USE=')
            for line in data:
                if reline in line:
                    ls_wine = line.replace(reline, '').replace('wine_', 'WINE:\n')
                    print(ls_wine)

        def desktop_icon():

            try:
                icon_path = open(f"{sw_icon}/" + str(app_name) + '_x96.png')
            except IOError as e:
                print("icon not found, set default icon")
                icon_path = f"{sw_icon}/gui_icons/SW_Launcher_x96.png"
            else:
                icon_path = f"{sw_icon}/" + str(app_name) + '_x96.png'

            def desktop_pfx():

                file_name = f"{sw_shortcuts}/" + str(app_name) + '.desktop'
                try:
                    data = desktop_name.read_text().split('\n')
                    reline = str('Name_2=')
                    for line in data:
                        if reline in line:
                            pfx = line.replace(reline, '').replace('pfx_', '')
                            print(pfx)

                except IOError as e:

                    print("game desktop not found, set default value")
                    game_icon = builder.get_object("game_icon")
                    game_icon.set_from_file(icon_path)
                    game_label1 = builder.get_object("game_label1")
                    game_label1.set_label('START MODE')
                    game_label2 = builder.get_object("game_label2")
                    game_label2.set_label("PREFIX:\ndefault")
                    game_label3 = builder.get_object("game_label3")
                    game_label3.set_label(str(ls_wine))

                else:

                    game_icon = builder.get_object("game_icon")
                    game_icon.set_from_file(icon_path)
                    game_label1 = builder.get_object("game_label1")
                    game_label1.set_label('START MODE')
                    game_label2 = builder.get_object("game_label2")
                    game_label2.set_label('PREFIX:\n' + str(pfx))
                    game_label3 = builder.get_object("game_label3")
                    game_label3.set_label(str(ls_wine))

            desktop_pfx()
        desktop_icon()
    desktop_wine()
game_name()

btn_start = builder.get_object("btn_start")
btn_start.connect("clicked", on_btn_start)

btn_shortcuts = builder.get_object("btn_shortcuts")
btn_shortcuts.connect("clicked", on_btn_shortcuts)

###############################################___BUILDER_SHORTCUTS___##################################################

main_stack = builder.get_object("main_stack")
sc_flowbox = builder.get_object("sc_flowbox")

shortcut_scrolled = builder.get_object("shortcut_scrolled")
shortcut_main_box = builder.get_object("shortcut_main_box")

top_header = builder.get_object("sw_top_header")
window.connect("configure-event", get_size)

shortcuts()

############################################___BUILDER_CREATE_SHORTCUT___###############################################

btn_create_shortcut = builder.get_object("btn_create_shortcut")
btn_create_shortcut.connect("clicked", on_btn_create_shortcut)

btn_cs_staging = builder.get_object("btn_cs_staging")
btn_cs_staging.connect("clicked", on_btn_cs_staging)

btn_cs_steam = builder.get_object("btn_cs_steam")
btn_cs_steam.connect("clicked", on_btn_cs_steam)

btn_cs_ge = builder.get_object("btn_cs_ge")
btn_cs_ge.connect("clicked", on_btn_cs_ge)

btn_cs_lutris = builder.get_object("btn_cs_lutris")
btn_cs_lutris.connect("clicked", on_btn_cs_lutris)

btn_cs_lutris_ge = builder.get_object("btn_cs_lutris_ge")
btn_cs_lutris_ge.connect("clicked", on_btn_cs_lutris_ge)

btn_cs_custom = builder.get_object("btn_cs_custom")
btn_cs_custom.connect("clicked", on_btn_cs_custom)

btn_cs_custom_1 = builder.get_object("btn_cs_custom_1")
btn_cs_custom_1.connect("clicked", on_btn_cs_custom_1)

btn_cs_custom_2 = builder.get_object("btn_cs_custom_2")
btn_cs_custom_2.connect("clicked", on_btn_cs_custom_2)

btn_cs_custom_3 = builder.get_object("btn_cs_custom_3")
btn_cs_custom_3.connect("clicked", on_btn_cs_custom_3)

btn_cs_custom_4 = builder.get_object("btn_cs_custom_4")
btn_cs_custom_4.connect("clicked", on_btn_cs_custom_4)

btn_cs_custom_5 = builder.get_object("btn_cs_custom_5")
btn_cs_custom_5.connect("clicked", on_btn_cs_custom_5)

#############################################___BUILDER_PREFIX_TOOLS___#################################################

btn_prefix_tools = builder.get_object("btn_prefix_tools")
btn_prefix_tools.connect("clicked", on_btn_prefix_tools)

btn_remove_prefix = builder.get_object("btn_remove_prefix")
btn_remove_prefix.connect("clicked", on_btn_remove_prefix)

btn_reinstall_prefix = builder.get_object("btn_reinstall_prefix")
btn_reinstall_prefix.connect("clicked", on_btn_reinstall_prefix)

btn_pfx_backup = builder.get_object("btn_pfx_backup")
btn_pfx_backup.connect("clicked", on_btn_pfx_backup)

btn_pfx_restore = builder.get_object("btn_pfx_restore")
btn_pfx_restore.connect("clicked", on_btn_pfx_restore)

btn_pfx_full_backup = builder.get_object("btn_pfx_full_backup")
btn_pfx_full_backup.connect("clicked", on_btn_pfx_full_backup)

btn_pfx_full_restore = builder.get_object("btn_pfx_full_restore")
btn_pfx_full_restore.connect("clicked", on_btn_pfx_full_restore)

##############################################___BUILDER_WINE_TOOLS___##################################################

btn_winetools = builder.get_object("btn_winetools")
btn_winetools.connect("clicked", on_btn_winetools)

btn_winecfg = builder.get_object("btn_winecfg")
btn_winecfg.connect("clicked", on_btn_winecfg)

btn_wineconsole = builder.get_object("btn_wineconsole")
btn_wineconsole.connect("clicked", on_btn_wineconsole)

btn_regedit = builder.get_object("btn_regedit")
btn_regedit.connect("clicked", on_btn_regedit)

btn_file_explorer = builder.get_object("btn_file_explorer")
btn_file_explorer.connect("clicked", on_btn_file_explorer)

btn_uninstaller = builder.get_object("btn_uninstaller")
btn_uninstaller.connect("clicked", on_btn_uninstaller)

#############################################___BUILDER_WINETRICKS___###################################################

se_stack = builder.get_object("se_stack")
se = builder.get_object("se")
view = builder.get_object("se_view")

winetricks_scrolled = builder.get_object("winetricks_scrolled")
winetricks_notebook = builder.get_object("winetricks_notebook")
pfx_label = builder.get_object("pfx_label")

btn_winetricks = builder.get_object("btn_winetricks")
btn_winetricks.connect("clicked", on_btn_winetricks)

btn_install_dll = builder.get_object("btn_install_dll")
btn_install_dll.connect("clicked", on_btn_install_dll)

winetricks_text_view = builder.get_object("winetricks_text_view")
wt_buffer = builder.get_object("winetricks_text_buffer")

fonts_scrolled = builder.get_object("winetricks_scrolled")
fonts_view = builder.get_object("fonts_view")
fonts_buffer = builder.get_object("fonts_buffer")

builder.connect_signals({'on_btn_check_dll': (on_btn_check_dll), 'on_btn_check_fonts': (on_btn_check_fonts), 'on_btn_check_conf': (on_btn_check_conf), 'on_vk_check_conf': (on_vk_check_conf)})

btn_install_rl = builder.get_object("btn_install_rl")
btn_install_rl.connect("clicked", on_btn_install_rl)

se.connect("search_changed", search_changed)
se.connect("key-press-event", key_event)
view.connect("row-activated", get_selected)

startIter, endIter = wt_buffer.get_bounds()
data_content = wt_buffer.get_text(startIter, endIter, False).split('\n')
count = 0
data_0 = ['']
store = Gtk.ListStore(str)
treeiter = store.append(data_0)
view.set_model(store)
renderer = Gtk.CellRendererText()
column = view.insert_column_with_attributes(0 , "List" , renderer, text=0)

################################################___BUILDER_DEBUG___#####################################################

btn_debug = builder.get_object("btn_debug")
btn_debug.connect("clicked", on_btn_debug)

############################################___BUILDER_DOWNLOAD_WINE___#################################################

btn_dw = builder.get_object("btn_dw")
btn_dw.connect("clicked", on_btn_dw)

btn_wine_1 = builder.get_object("btn_staging")
btn_wine_1.connect("clicked", on_btn_wine_1)

btn_rm_staging = builder.get_object("btn_rm_staging")
btn_rm_staging.connect("clicked", on_btn_rm_staging)

btn_wine_2 = builder.get_object("btn_steam")
btn_wine_2.connect("clicked", on_btn_wine_2)

btn_rm_proton = builder.get_object("btn_rm_proton")
btn_rm_proton.connect("clicked", on_btn_rm_proton)

btn_wine_3 = builder.get_object("btn_ge")
btn_wine_3.connect("clicked", on_btn_wine_3)

btn_rm_ge = builder.get_object("btn_rm_ge")
btn_rm_ge.connect("clicked", on_btn_rm_ge)

btn_wine_4 = builder.get_object("btn_lutris")
btn_wine_4.connect("clicked", on_btn_wine_4)

btn_rm_lutris = builder.get_object("btn_rm_lutris")
btn_rm_lutris.connect("clicked", on_btn_rm_lutris)

btn_wine_5 = builder.get_object("btn_lutris_ge")
btn_wine_5.connect("clicked", on_btn_wine_5)

btn_rm_lutris_ge = builder.get_object("btn_rm_lutris_ge")
btn_rm_lutris_ge.connect("clicked", on_btn_rm_lutris_ge)

btn_wine_6 = builder.get_object("btn_custom")
btn_wine_6.connect("clicked", on_btn_wine_6)

#############################################___BUILDER_LAUNCHERS___####################################################

inst_flowbox = builder.get_object("inst_flowbox")
btn_inst_launchers = builder.get_object("btn_inst_launchers")
btn_inst_launchers.connect("clicked", on_btn_inst_launchers)
launcher_label = builder.get_object("launcher_label")
launchers()

#############################################___BUILDER_BUTTON_BACK___##################################################

btn_back_ab = builder.get_object("btn_back_ab")
btn_back_ab.connect("clicked", on_btn_back_ab)

btn_settings = builder.get_object("btn_settings")
btn_settings.connect("clicked", on_btn_settings)

btn_stop = builder.get_object("btn_stop")
btn_stop.connect("clicked", on_btn_stop)

btn_back_cs = builder.get_object("btn_back_cs")
btn_back_cs.connect("clicked", on_btn_back_cs)

btn_back_pt = builder.get_object("btn_back_pt")
btn_back_pt.connect("clicked", on_btn_back_pt)

btn_back_wt = builder.get_object("btn_back_wt")
btn_back_wt.connect("clicked", on_btn_back_wt)

btn_back_dw = builder.get_object("btn_back_dw")
btn_back_dw.connect("clicked", on_btn_back_dw)

btn_back_winetricks = builder.get_object("btn_back_winetricks")
btn_back_winetricks.connect("clicked", on_btn_back_winetricks)

##############################################___BUILDER_SETTINGS___####################################################

settings_stack = builder.get_object("settings_stack")

settings_scrolled = builder.get_object("settings_scrolled")
vkbasalt_scrolled = builder.get_object("vkbasalt_scrolled")

vk_btn_grid = builder.get_object("vk_btn_grid")
vk_buffer = builder.get_object("vk_buffer")

startIter, endIter = vk_buffer.get_bounds()
vk_data = vk_buffer.get_text(startIter, endIter, False).split('\n')

btn_depth = builder.get_object("btn_depth")
btn_depth.connect("toggled", on_btn_depth)

btn_fps = builder.get_object("btn_fps")
btn_fps.connect("toggled", on_btn_fps)

fps_scale = builder.get_object('fps_scale')
fps_scale.connect("value-changed", on_fps_scale)

effect_scale = builder.get_object("effect_scale")
effect_scale.connect("value-changed", on_effect_scale)

btn_app_conf_default = builder.get_object("btn_app_conf_default")
btn_app_conf_default.connect("clicked", on_btn_app_conf_default)

btn_launch_conf = builder.get_object("btn_launch_conf")
btn_launch_conf.connect("clicked", on_btn_launch_conf)

btn_vkbasalt_conf = builder.get_object("btn_vkbasalt_conf")
btn_vkbasalt_conf.connect("clicked", on_btn_vkbasalt_conf)

app_settings_label = builder.get_object("app_conf_label")
themes_stack = builder.get_object("themes_stack")

hud_posR = builder.get_object('btn_R')
hud_posL = builder.get_object('btn_L')

################################################___BUILDER_PROGRESSBAR___###############################################

progressbar = builder.get_object("start_progress")
progressbar_wt = builder.get_object("progressbar_wt")
progressbar_pt = builder.get_object("progressbar_pt")
progressbar_cs = builder.get_object("progressbar_cs")
progressbar_dll = builder.get_object("progressbar_dll")
progressbar_inst = builder.get_object("progressbar_inst")

progressbar_lock = threading.Lock()
progress_lock_rl = threading.Lock()

###################################################___GET_VTE___########################################################

terminal = Vte.Terminal()
terminal.spawn_async(
    Vte.PtyFlags.DEFAULT,
    os.environ['HOME'],
    ['/bin/bash'],
    None,
    GLib.SpawnFlags.DEFAULT,
    None, None,
    -1,
    None,
    None,
    None,
)
spacer = Gtk.Label.new("               ")

terminal.set_scrollback_lines(2048)
term_font = Pango.FontDescription("Normal 11")
terminal.set_font(term_font)
terminal.set_clear_background(False)
terminal.set_hexpand(True)
terminal.set_vexpand(True)

menu = builder.get_object("menu_grid")

vte_main_box = builder.get_object("vte_main_box")
vte_main_grid = builder.get_object("vte_main_grid")
vte_main_grid.attach(terminal, 0, 0, 1, 1)

vte_scrolled = builder.get_object("vte_scrolled")

btn_back_terminal = builder.get_object("btn_back_terminal")
btn_back_terminal.connect("clicked", on_btn_back_terminal)

out_cmd = get_arg(get_out())
gc = Path(f"{sw_games_config}/" + str(out_cmd))
sw_theme = f"sed -n '/SW_THEME=white_theme/p' {gc}"
proc = subprocess.run(sw_theme, shell=True, stdout=subprocess.PIPE, encoding='UTF-8')
sw_theme_name = str(proc.stdout[0:]).replace('\n', '')

if str(sw_theme_name) == str('SW_THEME=white_theme'):

    terminal.set_clear_background(True)

########################################################################################################################

window.connect("destroy", Gtk.main_quit)
window.show_all()

Gtk.main()
