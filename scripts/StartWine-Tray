#!/usr/bin/env python3

################################___TRAY___:

import os
import sys
from pathlib import Path
import subprocess
from subprocess import *
import threading

link = f"{sys.argv[0]}/"
sw_path_link = Path(link).parent

ld_lib = f"{sw_path_link.parent.parent}/data/tools/utils/libs/x86-64"
gi_typelib = f"{sw_path_link.parent.parent}/data/tools/utils/libs/x86-64/gi_typelib"

os.environ["LD_LIBRARY_PATH"] = os.pathsep + ld_lib
os.environ["GI_TYPELIB_PATH"] = os.pathsep + gi_typelib

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk as gtk
from gi.repository import Gdk, GdkPixbuf, Gio, GLib, GObject, Pango

sw_scripts = f"{sw_path_link}/"
sw_path = Path(sw_scripts).parent.parent
sw_shortcuts = Path(sw_path) / 'Shortcuts'

sw_fsh = Path(f"{sw_scripts}sw_function.sh")
sw_rsh = Path(f"{sw_scripts}sw_run.sh")
sw_start = Path(f"{sw_scripts}sw_start")
sw_main = Path(f"{sw_scripts}/sw_main")
sw_localedir = Path(f"{sw_scripts}/locale")

sw_data = Path(f"{sw_path}/data")
sw_app_config = Path(f"{sw_data}/app_config")
sw_default_config = Path(f"{sw_app_config}/.default")
sw_defconf_read = sw_default_config.read_text().split('\n')

################################___LANG___:

import locale
import gettext
_ = gettext.gettext

domain = 'StartWine'
locale.textdomain(domain)
locale.bindtextdomain(domain, sw_localedir)

lang_en = gettext.translation(domain, localedir=sw_localedir, languages=['en:en'])
lang_ru = gettext.translation(domain, localedir=sw_localedir, languages=['ru:en'])

get_lang = [lang for lang in sw_defconf_read if 'export SW_USE_LANG=' in lang]

if get_lang == ['export SW_USE_LANG=ru']:

    try:
        locale.setlocale(locale.LC_MESSAGES, ('ru_RU', 'UTF-8'))
        lang_ru.install
        _ = lang_ru.gettext
        print('<< sw_tray_ru_locale_is_set >>')

    except:
        print('<< sw_tray_ru_locale_not_found >>')
        locale.setlocale(locale.LC_MESSAGES, ('en_US', 'UTF-8'))
        lang_en.install
        _ = lang_en.gettext
        print('<< sw_tray_en_locale_is_set >>')
        pass

if get_lang == ['export SW_USE_LANG=en']:

    try:
        locale.setlocale(locale.LC_MESSAGES, ('en_US', 'UTF-8'))
        lang_en.install
        _ = lang_en.gettext
        print('<< sw_tray_en_locale_is_set >>')

    except:
        print('<< sw_tray_en_locale_not_found >>')
        pass

################################___REQUIRE_VERSION___:

appind = 1

try:
    gi.require_version('AppIndicator3', '0.1')
    from gi.repository import AppIndicator3 as appindicator
except:
    try:
        gi.require_version('AyatanaAppIndicator3', '0.1')
        from gi.repository import AyatanaAppIndicator3 as appindicator
    except:
        appind = 0

APPINDICATOR_ID = 'StartWine'
DIRPATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

if appind == 1:
    def main():
        menu = gtk.Menu()
        indicator = appindicator.Indicator.new(APPINDICATOR_ID, DIRPATH+"/img/gui_icons/folder-wine-symbolic.svg", appindicator.IndicatorCategory.APPLICATION_STATUS)
        indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        indicator.set_menu(tray_menu())
        gtk.main()
else:
    print('<< AppIndicator_not_found >>')

################################___APPINDICATOR3___:

def get_app_path():

    app_default = f'env \"{sw_main}\" '
    app_path = str(sw_rsh.read_text()).replace(app_default, '')

    if not Path(app_path).suffix:
        app_path = f'StartWine'

    return app_path

def get_arg(arg):
    return arg

def tray_menu():

    menu = gtk.Menu()

################################___APP_NAME___:

    def get_app_name():

        app_path = get_arg(get_app_path())
        app_name = str(_('Open ')) + str(Path(app_path).stem)

        cmd_0 = gtk.MenuItem.new_with_label(str(app_name))
        cmd_0.connect('activate', start_app)
        menu.append(cmd_0)

    get_app_name()

    def get_localapp_name():

        app_path = get_arg(get_app_path())
        app_name = str(_('Run ')) + str(Path(app_path).stem)

        localapp = Path(f"{Path.home()}/.local/share/applications/{app_name}.desktop")

        if localapp.exists():
            if localapp != Path(f"{Path.home()}/.local/share/applications/StartWine.desktop"):
                cmd_run = gtk.MenuItem.new_with_label(str(out_run_name))
                cmd_run.connect('activate', start_app_local)
                menu.append(cmd_run)
            else:
                return False

    get_localapp_name()

    cmd_1 = gtk.MenuItem.new_with_label(_('Shortcuts'))
    cmd_1.connect('activate', shortcuts)
    menu.append(cmd_1)

    cmd_2 = gtk.MenuItem.new_with_label(_('Settings'))
    cmd_2.connect('activate', settings)
    menu.append(cmd_2)

    cmd_3 = gtk.MenuItem.new_with_label(_('Stop'))
    cmd_3.connect('activate', kill)
    menu.append(cmd_3)

    exittray = gtk.MenuItem.new_with_label(_('Exit Tray'))
    exittray.connect('activate', quit)
    menu.append(exittray)

    menu.show_all()
    return menu

################################___START_GAME___:

def start_app(_):

    cmd = f"{sw_scripts}sw_run.sh"
    subprocess.Popen(cmd, shell=True, start_new_session=True)

def start_app_local(_):

    app_path = get_arg(get_app_path())
    app_name = str(Path(app_path).stem)

    cmd_run_localapp = f"{Path.home()}/.local/share/applications/{app_name}.desktop"
    subprocess.Popen(cmd_run_localapp, shell=True, start_new_session=True)

################################___SHORTCUTS___:

def shortcuts(_):

    app_path = get_arg(get_app_path())

    cmd_shortcuts = f"{sw_main} {app_path} --shortcut"
    subprocess.Popen(cmd_shortcuts, shell=True, start_new_session=True)

################################___SETTINGS___:

def settings(_):

    app_path = get_arg(get_app_path())

    cmd_settings = f"{sw_main} {app_path} --settings"
    subprocess.Popen(cmd_settings, shell=True, start_new_session=True)

################################___STOP___:

def kill(_):

    try:
        p = Popen(['ps', '-AF'], stdout=subprocess.PIPE, encoding='UTF-8')
        out, err = p.communicate()

        for line in out.splitlines():

            if 'sw_function.sh' in line:
                pid = int(line.split()[1])
                os.kill(pid, 9)

    except:
        pass

    cmd = f"{sw_scripts}sw_stop"
    subprocess.call(cmd, shell=True)

############################___EXIT___:

def quit(_):

    gtk.main_quit()

try:
    if __name__ == "__main__":
        main()
except:
    print('<< exit_tray >>')

